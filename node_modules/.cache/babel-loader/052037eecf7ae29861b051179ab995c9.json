{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport Img from '../../../atoms/atImg/index.js';\nimport Div from '../../../atoms/atDiv/index.js';\nimport Layout from '../../../moleculas/layout';\nimport MoHead from '../../../moleculas/moHead';\nimport DivCodigo from '../../../atoms/atDivCodigo'; //import DivNaveg from '../../../atoms/atDivNaveg'\n\nimport * as Util from '../../../../controller/util.js';\n\nvar codigoJava = function codigoJava(props) {\n  console.log('╔═══════════════════════════╗');\n  console.log('║    Tutorial  sql       ║');\n  console.log('╚═══════════════════════════╝');\n  var regiao = Util.validaProps(props.regiao, \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n  return React.createElement(\"div\", {\n    className: \"jsx-1367375073\"\n  }, React.createElement(MoHead, {\n    modo: modo,\n    title: \"SQL\",\n    description: \"SQL\",\n    canonical: \"/tutorial/sql/\"\n  }), React.createElement(Layout, {\n    regiao: regiao,\n    modo: modo,\n    titulo: \"Tutoriais\",\n    categoria: \"sql\"\n  }, React.createElement(Div, {\n    display: \"responcivo\"\n  }, React.createElement(\"div\", {\n    className: \"jsx-1367375073\" + \" \" + \"coluna404\"\n  }, React.createElement(\"h1\", {\n    className: \"jsx-1367375073\"\n  }, \"SQL\"), React.createElement(\"h3\", {\n    className: \"jsx-1367375073\"\n  }, \"O que \\xE9 SQL?\"), React.createElement(\"p\", {\n    className: \"jsx-1367375073\"\n  }, \"SQL, ou Structured Query Language, ou Linguagem de Consulta Estruturada, \\xE9 a linguagem de pesquisa declarativa padr\\xE3o para banco de dados relacional (base de dados relacional). As caracter\\xEDsticas originais do SQL foram inspiradas na \\xE1lgebra relacional.\"), React.createElement(\"h3\", {\n    className: \"jsx-1367375073\"\n  }, \"A linguagem:\"), React.createElement(DivCodigo, {\n    titulo: \"Adicionar um novo registro\"\n  }, \"Insert Into clientes  (nome, sobrenomes, endere\\xE7o, cidade, c\\xF3digo postal, e-mail, pedidos) Values ('Pedro', 'Palotes', 'Percebe n\\xB013', 'Londrina', '123456', 'pedro@criarweb.com', 33)\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), \"Insert Into nome_tabela (nome_campo1, nome_campo2,...) Values (valor_campo1, valor_campo2...)\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Apagar um registro\"\n  }, \"Delete From nome_tabela Where condicoes_de_selecao\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Atualizar um registro\"\n  }, \"Update clientes Set nome='Jos\\xE9' Where nome='Pedro' \", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), \"Update nome_tabela Set nome_campo1 = valor_campo1, nome_campo2 = valor_campo2,... Where condicoes_de_selecao\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Sele\\xE7\\xE3o de tabelas I:\"\n  }, \"Select * From clientes\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Mostrar os clientes da cidade 'Rio de janeiro':\"\n  }, \"Select * From clientes Where cidade Like 'Rio de janeiro'\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Ordenar o resultado pelo campo nome:\"\n  }, \"Select * From clientes Where cidade Like 'Rio de janeiro' Order By nome\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"Ordenar o resultado pelos campos nome e sobrenome:\"\n  }, \"Select * From clientes Where cidade Like 'Rio de Janeiro' Order By nome, sobrenome\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(DivCodigo, {\n    titulo: \"\\xC9 poss\\xEDvel tamb\\xE9m usar ordem inversa:\"\n  }, \"Select * From clientes Order By pedidos Decres\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Uma op\\xE7\\xE3o interessante \\xE9 a de efetuar sele\\xE7\\xF5es sem coincid\\xEAncia. Se por exemplo, \", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"busc\\xE1ssemos saber em que cidades se encontram nossos clientes sem a necessidade de que para isso apare\\xE7a v\\xE1rias vezes a mesma cidade,\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"usar\\xEDamos uma senten\\xE7a desta classe:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Ex.: Select Distinct cidade From clientes Order By cidade \", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Nesta senten\\xE7a selecionamos todos os clientes de Salvador cujo nome n\\xE3o seja Jose. Como se pode ver, empregamos Like ao inv\\xE9s de = simplesmente para evitar inconvenientes devido ao emprego ou n\\xE3o de mai\\xFAsculas.\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select * From clientes Where cidade Like 'salvador' And Not nome Like 'Jose'\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Se quis\\xE9ssemos recolher em uma sele\\xE7\\xE3o aos clientes de nossa tabela cujo sobrenome come\\xE7a por A e cujo n\\xFAmero de pedidos esteja compreendido entre 20 e 40:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select * From clientes Where sobrenomes like 'A%' And pedidos Between 20 And 40\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"O operador In, ser\\xE1 visto mais adiante, \\xE9 muito pr\\xE1tico para consultas em v\\xE1rias tabelas. Para casos em uma \\xFAnica tabela \\xE9 empregada da seguinte forma:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select * From clientes Where cidade In ('Salvador','Fortaleza','Florianopolis') \", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select em varias tabelas:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select clientes.sobrenomes, clientes.email From clientes,pedidos Where pedidos.data like '25/02/00' And pedidos.id_cliente= clientes.id_cliente\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select pedidos.id_pedido, artigos.titulo From pedidos, artigos Where pedidos.id_artigo=artigos.id_artigo \", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Dado que o campo da fun\\xE7\\xE3o n\\xE3o existe no banco de dados, pois o estamos gerando virtualmente, isto pode criar inconvenientes quando estivermos trabalhando com nossos scripts na hora de tratar seu valor e seu nome de campo. \\xC9 por isso que o valor da fun\\xE7\\xE3o tem que ser recuperada a partir de um apelido que n\\xF3s especificaremos na senten\\xE7a SQL a partir da instru\\xE7\\xE3o AS. A coisa poderia ficar assim:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select Soma(total) As soma_pedidos From pedidos\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"A partir desta senten\\xE7a calculamos a soma dos valores de todos os pedidos realizados e armazenamos esse valor em um campo virtual chamado soma_pedidos que poder\\xE1 ser utilizado como qualquer outro campo por nossas p\\xE1ginas din\\xE2micas.\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Obviamente, tudo que foi visto at\\xE9 agora pode ser aplicado neste tipo de fun\\xE7\\xF5es de modo que, por exemplo, podemos estabelecer condi\\xE7\\xF5es com a cl\\xE1usula Where construindo senten\\xE7as como esta:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select Soma(quantidade) as soma_artigos From pedidos Where id_artigo=6\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Isto nos proporcionaria a quantidade de exemplares de um determinado livro que foram vendidos.\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Outra propriedade interessante destas fun\\xE7\\xF5es \\xE9 que permitem realizar opera\\xE7\\xF5es com v\\xE1rios campos dentro de um mesmo par\\xEAnteses:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select Avg(total/quantidade) From pedidos\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Esta senten\\xE7a d\\xE1 como resultado o pre\\xE7o m\\xE9dio que est\\xE3o sendo vendidos os livros. Este resultado n\\xE3o tem porqu\\xEA coincidir com o do pre\\xE7o m\\xE9dio dos livros presentes no invent\\xE1rio, j\\xE1 que, pode ser que as pessoas tenham tend\\xEAncia a comprar os livros caros ou os baratos:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select Avg(precio) as preco_venda From artigos\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Uma cl\\xE1usula interessante no uso das fun\\xE7\\xF5es \\xE9 Group By. Esta cl\\xE1usula nos permite agrupar registros aos quais vamos aplicar a fun\\xE7\\xE3o. Podemos por exemplo calcular o dinheiro gastado por cada cliente:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"select id_cliente, Soma(total) as soma_pedidos From pedidos Group By id_cliente\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Ou saber o n\\xFAmero de pedidos que foram realizados:\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  }), \"Select id_cliente, Count(*) as numero_pedidos From pedidos Group By id_cliente\", React.createElement(\"br\", {\n    className: \"jsx-1367375073\"\n  })), React.createElement(\"div\", {\n    className: \"jsx-1367375073\"\n  }, React.createElement(Img, {\n    src: \"/static/assetsv5/img/codigo/logosql.svg\",\n    width: \"200px\",\n    height: \"200px\",\n    alt: \"Logo sql\",\n    title: \"Logo sql\",\n    class: \"ClassLogosql\",\n    modo: modo\n  })))), React.createElement(_JSXStyle, {\n    id: \"1367375073\"\n  }, \".h1.jsx-1367375073{color :#000000;}.p.jsx-1367375073{color :#000000;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL29pNDAyODI1L0RvY3VtZW50b3MvUHJvamV0b3Mvc2l0ZV9kb192YWxlbnRlL2NvbXBvbmVudHMvdGVtcGxhdGVzL2NvZGlnby9iYW5jb2RlZGFkb3Mvc3FsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Ja0IsQUFHMEIsQUFHQSxlQUZqQixBQUdBIiwiZmlsZSI6Ii9ob21lL29pNDAyODI1L0RvY3VtZW50b3MvUHJvamV0b3Mvc2l0ZV9kb192YWxlbnRlL2NvbXBvbmVudHMvdGVtcGxhdGVzL2NvZGlnby9iYW5jb2RlZGFkb3Mvc3FsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEltZyBmcm9tICcuLi8uLi8uLi9hdG9tcy9hdEltZy9pbmRleC5qcydcbmltcG9ydCBEaXYgZnJvbSAnLi4vLi4vLi4vYXRvbXMvYXREaXYvaW5kZXguanMnXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uLy4uLy4uL21vbGVjdWxhcy9sYXlvdXQnXG5pbXBvcnQgTW9IZWFkIGZyb20gJy4uLy4uLy4uL21vbGVjdWxhcy9tb0hlYWQnXG5pbXBvcnQgRGl2Q29kaWdvIGZyb20gJy4uLy4uLy4uL2F0b21zL2F0RGl2Q29kaWdvJ1xuLy9pbXBvcnQgRGl2TmF2ZWcgZnJvbSAnLi4vLi4vLi4vYXRvbXMvYXREaXZOYXZlZydcbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vLi4vLi4vLi4vY29udHJvbGxlci91dGlsLmpzJztcblxuY29uc3QgY29kaWdvSmF2YSA9IGZ1bmN0aW9uIChwcm9wcykge1xuXG4gIGNvbnNvbGUubG9nKCfilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZcnKTtcbiAgY29uc29sZS5sb2coJ+KVkSAgICBUdXRvcmlhbCAgc3FsICAgICAgIOKVkScpO1xuICBjb25zb2xlLmxvZygn4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdJyk7XG5cbiAgdmFyIHJlZ2lhbyA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMucmVnaWFvICwgXCJSSlwiKTtcbiAgdmFyIG1vZG8gPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLm1vZG8sIFwiaHRtbFwiKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TW9IZWFkIFxuICAgICAgICBtb2RvPXttb2RvfSBcbiAgICAgICAgdGl0bGU9XCJTUUxcIiBcbiAgICAgICAgZGVzY3JpcHRpb249XCJTUUxcIiBcbiAgICAgICAgY2Fub25pY2FsPVwiL3R1dG9yaWFsL3NxbC9cIi8+XG4gICAgICA8TGF5b3V0IHJlZ2lhbz17cmVnaWFvfSBtb2RvPXttb2RvfSB0aXR1bG89XCJUdXRvcmlhaXNcIiBjYXRlZ29yaWE9XCJzcWxcIj5cbiAgICAgICAgPERpdiBkaXNwbGF5PVwicmVzcG9uY2l2b1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW5hNDA0XCI+XG4gICAgICAgICAgICA8aDE+U1FMPC9oMT5cbiAgICAgICAgICAgIDxoMz5PIHF1ZSDDqSBTUUw/PC9oMz5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgU1FMLCBvdSBTdHJ1Y3R1cmVkIFF1ZXJ5IExhbmd1YWdlLCBvdSBMaW5ndWFnZW0gZGUgQ29uc3VsdGEgRXN0cnV0dXJhZGEsIMOpIGEgbGluZ3VhZ2VtIGRlIHBlc3F1aXNhIGRlY2xhcmF0aXZhIHBhZHLDo28gcGFyYSBiYW5jbyBkZSBkYWRvcyByZWxhY2lvbmFsIChiYXNlIGRlIGRhZG9zIHJlbGFjaW9uYWwpLlxuICAgICAgICAgICAgICAgIEFzIGNhcmFjdGVyw61zdGljYXMgb3JpZ2luYWlzIGRvIFNRTCBmb3JhbSBpbnNwaXJhZGFzIG5hIMOhbGdlYnJhIHJlbGFjaW9uYWwuXG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxoMz5BIGxpbmd1YWdlbTo8L2gzPlxuICAgICAgICAgICAgICA8RGl2Q29kaWdvIHRpdHVsbz1cIkFkaWNpb25hciB1bSBub3ZvIHJlZ2lzdHJvXCI+XG4gICAgICAgICAgICAgICAgSW5zZXJ0IEludG8gY2xpZW50ZXMgIChub21lLCBzb2JyZW5vbWVzLCBlbmRlcmXDp28sIGNpZGFkZSwgY8OzZGlnbyBwb3N0YWwsIGUtbWFpbCwgcGVkaWRvcykgVmFsdWVzICgnUGVkcm8nLCAnUGFsb3RlcycsICdQZXJjZWJlIG7CsDEzJywgJ0xvbmRyaW5hJywgJzEyMzQ1NicsICdwZWRyb0BjcmlhcndlYi5jb20nLCAzMyk8YnIvPlxuICAgICAgICAgICAgICA8L0RpdkNvZGlnbz5cbiAgICAgICAgICAgICAgSW5zZXJ0IEludG8gbm9tZV90YWJlbGEgKG5vbWVfY2FtcG8xLCBub21lX2NhbXBvMiwuLi4pIFZhbHVlcyAodmFsb3JfY2FtcG8xLCB2YWxvcl9jYW1wbzIuLi4pPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPERpdkNvZGlnbyB0aXR1bG89XCJBcGFnYXIgdW0gcmVnaXN0cm9cIj5cbiAgICAgICAgICAgICAgICBEZWxldGUgRnJvbSBub21lX3RhYmVsYSBXaGVyZSBjb25kaWNvZXNfZGVfc2VsZWNhbzxici8+XG4gICAgICAgICAgICAgIDwvRGl2Q29kaWdvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8RGl2Q29kaWdvIHRpdHVsbz1cIkF0dWFsaXphciB1bSByZWdpc3Ryb1wiPlxuICAgICAgICAgICAgICAgIFVwZGF0ZSBjbGllbnRlcyBTZXQgbm9tZT0nSm9zw6knIFdoZXJlIG5vbWU9J1BlZHJvJyA8YnIvPlxuICAgICAgICAgICAgICA8L0RpdkNvZGlnbz5cbiAgICAgICAgICAgICAgVXBkYXRlIG5vbWVfdGFiZWxhIFNldCBub21lX2NhbXBvMSA9IHZhbG9yX2NhbXBvMSwgbm9tZV9jYW1wbzIgPSB2YWxvcl9jYW1wbzIsLi4uIFdoZXJlIGNvbmRpY29lc19kZV9zZWxlY2FvPGJyLz5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIDxEaXZDb2RpZ28gdGl0dWxvPVwiU2VsZcOnw6NvIGRlIHRhYmVsYXMgSTpcIj5cbiAgICAgICAgICAgICAgU2VsZWN0ICogRnJvbSBjbGllbnRlczxici8+XG4gICAgICAgICAgICAgIDwvRGl2Q29kaWdvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8RGl2Q29kaWdvIHRpdHVsbz1cIk1vc3RyYXIgb3MgY2xpZW50ZXMgZGEgY2lkYWRlICdSaW8gZGUgamFuZWlybyc6XCI+XG4gICAgICAgICAgICAgIFNlbGVjdCAqIEZyb20gY2xpZW50ZXMgV2hlcmUgY2lkYWRlIExpa2UgJ1JpbyBkZSBqYW5laXJvJzxici8+XG4gICAgICAgICAgICAgIDwvRGl2Q29kaWdvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8RGl2Q29kaWdvIHRpdHVsbz1cIk9yZGVuYXIgbyByZXN1bHRhZG8gcGVsbyBjYW1wbyBub21lOlwiPlxuICAgICAgICAgICAgICBTZWxlY3QgKiBGcm9tIGNsaWVudGVzIFdoZXJlIGNpZGFkZSBMaWtlICdSaW8gZGUgamFuZWlybycgT3JkZXIgQnkgbm9tZTxici8+XG4gICAgICAgICAgICAgIDwvRGl2Q29kaWdvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8RGl2Q29kaWdvIHRpdHVsbz1cIk9yZGVuYXIgbyByZXN1bHRhZG8gcGVsb3MgY2FtcG9zIG5vbWUgZSBzb2JyZW5vbWU6XCI+XG4gICAgICAgICAgICAgIFNlbGVjdCAqIEZyb20gY2xpZW50ZXMgV2hlcmUgY2lkYWRlIExpa2UgJ1JpbyBkZSBKYW5laXJvJyBPcmRlciBCeSBub21lLCBzb2JyZW5vbWU8YnIvPlxuICAgICAgICAgICAgICA8L0RpdkNvZGlnbz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPERpdkNvZGlnbyB0aXR1bG89XCLDiSBwb3Nzw612ZWwgdGFtYsOpbSB1c2FyIG9yZGVtIGludmVyc2E6XCI+XG4gICAgICAgICAgICAgIFNlbGVjdCAqIEZyb20gY2xpZW50ZXMgT3JkZXIgQnkgcGVkaWRvcyBEZWNyZXM8YnIvPlxuICAgICAgICAgICAgICA8L0RpdkNvZGlnbz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgVW1hIG9ww6fDo28gaW50ZXJlc3NhbnRlIMOpIGEgZGUgZWZldHVhciBzZWxlw6fDtWVzIHNlbSBjb2luY2lkw6puY2lhLiBTZSBwb3IgZXhlbXBsbywgPGJyLz5cbiAgICAgICAgICAgICAgYnVzY8Ohc3NlbW9zIHNhYmVyIGVtIHF1ZSBjaWRhZGVzIHNlIGVuY29udHJhbSBub3Nzb3MgY2xpZW50ZXMgc2VtIGEgbmVjZXNzaWRhZGUgZGUgcXVlIHBhcmEgaXNzbyBhcGFyZcOnYSB2w6FyaWFzIHZlemVzIGEgbWVzbWEgY2lkYWRlLDxici8+XG4gICAgICAgICAgICAgIHVzYXLDrWFtb3MgdW1hIHNlbnRlbsOnYSBkZXN0YSBjbGFzc2U6PGJyLz5cbiAgICAgICAgICAgICAgRXguOiBTZWxlY3QgRGlzdGluY3QgY2lkYWRlIEZyb20gY2xpZW50ZXMgT3JkZXIgQnkgY2lkYWRlIDxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIE5lc3RhIHNlbnRlbsOnYSBzZWxlY2lvbmFtb3MgdG9kb3Mgb3MgY2xpZW50ZXMgZGUgU2FsdmFkb3IgY3VqbyBub21lIG7Do28gc2VqYSBKb3NlLiBDb21vIHNlIHBvZGUgdmVyLCBlbXByZWdhbW9zIExpa2UgYW8gaW52w6lzIGRlID0gc2ltcGxlc21lbnRlIHBhcmEgZXZpdGFyIGluY29udmVuaWVudGVzIGRldmlkbyBhbyBlbXByZWdvIG91IG7Do28gZGUgbWFpw7pzY3VsYXMuPGJyLz5cbiAgICAgICAgICAgICAgU2VsZWN0ICogRnJvbSBjbGllbnRlcyBXaGVyZSBjaWRhZGUgTGlrZSAnc2FsdmFkb3InIEFuZCBOb3Qgbm9tZSBMaWtlICdKb3NlJzxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIFNlIHF1aXPDqXNzZW1vcyByZWNvbGhlciBlbSB1bWEgc2VsZcOnw6NvIGFvcyBjbGllbnRlcyBkZSBub3NzYSB0YWJlbGEgY3VqbyBzb2JyZW5vbWUgY29tZcOnYSBwb3IgQSBlIGN1am8gbsO6bWVybyBkZSBwZWRpZG9zIGVzdGVqYSBjb21wcmVlbmRpZG8gZW50cmUgMjAgZSA0MDo8YnIvPlxuICAgICAgICAgICAgICBTZWxlY3QgKiBGcm9tIGNsaWVudGVzIFdoZXJlIHNvYnJlbm9tZXMgbGlrZSAnQSUnIEFuZCBwZWRpZG9zIEJldHdlZW4gMjAgQW5kIDQwPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgTyBvcGVyYWRvciBJbiwgc2Vyw6EgdmlzdG8gbWFpcyBhZGlhbnRlLCDDqSBtdWl0byBwcsOhdGljbyBwYXJhIGNvbnN1bHRhcyBlbSB2w6FyaWFzIHRhYmVsYXMuIFBhcmEgY2Fzb3MgZW0gdW1hIMO6bmljYSB0YWJlbGEgw6kgZW1wcmVnYWRhIGRhIHNlZ3VpbnRlIGZvcm1hOjxici8+XG4gICAgICAgICAgICAgIFNlbGVjdCAqIEZyb20gY2xpZW50ZXMgV2hlcmUgY2lkYWRlIEluICgnU2FsdmFkb3InLCdGb3J0YWxlemEnLCdGbG9yaWFub3BvbGlzJykgPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgU2VsZWN0IGVtIHZhcmlhcyB0YWJlbGFzOjxici8+XG4gICAgICAgICAgICAgIFNlbGVjdCBjbGllbnRlcy5zb2JyZW5vbWVzLCBjbGllbnRlcy5lbWFpbCBGcm9tIGNsaWVudGVzLHBlZGlkb3MgV2hlcmUgcGVkaWRvcy5kYXRhIGxpa2UgJzI1LzAyLzAwJyBBbmQgcGVkaWRvcy5pZF9jbGllbnRlPSBjbGllbnRlcy5pZF9jbGllbnRlPGJyLz5cbiAgICAgICAgICAgICAgU2VsZWN0IHBlZGlkb3MuaWRfcGVkaWRvLCBhcnRpZ29zLnRpdHVsbyBGcm9tIHBlZGlkb3MsIGFydGlnb3MgV2hlcmUgcGVkaWRvcy5pZF9hcnRpZ289YXJ0aWdvcy5pZF9hcnRpZ28gPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgRGFkbyBxdWUgbyBjYW1wbyBkYSBmdW7Dp8OjbyBuw6NvIGV4aXN0ZSBubyBiYW5jbyBkZSBkYWRvcywgcG9pcyBvIGVzdGFtb3MgZ2VyYW5kbyB2aXJ0dWFsbWVudGUsIGlzdG8gcG9kZSBjcmlhciBpbmNvbnZlbmllbnRlcyBxdWFuZG8gZXN0aXZlcm1vcyB0cmFiYWxoYW5kbyBjb20gbm9zc29zIHNjcmlwdHMgbmEgaG9yYSBkZSB0cmF0YXIgc2V1IHZhbG9yIGUgc2V1IG5vbWUgZGUgY2FtcG8uIMOJIHBvciBpc3NvIHF1ZSBvIHZhbG9yIGRhIGZ1bsOnw6NvIHRlbSBxdWUgc2VyIHJlY3VwZXJhZGEgYSBwYXJ0aXIgZGUgdW0gYXBlbGlkbyBxdWUgbsOzcyBlc3BlY2lmaWNhcmVtb3MgbmEgc2VudGVuw6dhIFNRTCBhIHBhcnRpciBkYSBpbnN0cnXDp8OjbyBBUy4gQSBjb2lzYSBwb2RlcmlhIGZpY2FyIGFzc2ltOjxici8+XG4gICAgICAgICAgICAgIFNlbGVjdCBTb21hKHRvdGFsKSBBcyBzb21hX3BlZGlkb3MgRnJvbSBwZWRpZG9zPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgQSBwYXJ0aXIgZGVzdGEgc2VudGVuw6dhIGNhbGN1bGFtb3MgYSBzb21hIGRvcyB2YWxvcmVzIGRlIHRvZG9zIG9zIHBlZGlkb3MgcmVhbGl6YWRvcyBlIGFybWF6ZW5hbW9zIGVzc2UgdmFsb3IgZW0gdW0gY2FtcG8gdmlydHVhbCBjaGFtYWRvIHNvbWFfcGVkaWRvcyBxdWUgcG9kZXLDoSBzZXIgdXRpbGl6YWRvIGNvbW8gcXVhbHF1ZXIgb3V0cm8gY2FtcG8gcG9yIG5vc3NhcyBww6FnaW5hcyBkaW7Dom1pY2FzLjxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIE9idmlhbWVudGUsIHR1ZG8gcXVlIGZvaSB2aXN0byBhdMOpIGFnb3JhIHBvZGUgc2VyIGFwbGljYWRvIG5lc3RlIHRpcG8gZGUgZnVuw6fDtWVzIGRlIG1vZG8gcXVlLCBwb3IgZXhlbXBsbywgcG9kZW1vcyBlc3RhYmVsZWNlciBjb25kacOnw7VlcyBjb20gYSBjbMOhdXN1bGEgV2hlcmUgY29uc3RydWluZG8gc2VudGVuw6dhcyBjb21vIGVzdGE6PGJyLz5cbiAgICAgICAgICAgICAgU2VsZWN0IFNvbWEocXVhbnRpZGFkZSkgYXMgc29tYV9hcnRpZ29zIEZyb20gcGVkaWRvcyBXaGVyZSBpZF9hcnRpZ289Njxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIElzdG8gbm9zIHByb3BvcmNpb25hcmlhIGEgcXVhbnRpZGFkZSBkZSBleGVtcGxhcmVzIGRlIHVtIGRldGVybWluYWRvIGxpdnJvIHF1ZSBmb3JhbSB2ZW5kaWRvcy48YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICBPdXRyYSBwcm9wcmllZGFkZSBpbnRlcmVzc2FudGUgZGVzdGFzIGZ1bsOnw7VlcyDDqSBxdWUgcGVybWl0ZW0gcmVhbGl6YXIgb3BlcmHDp8O1ZXMgY29tIHbDoXJpb3MgY2FtcG9zIGRlbnRybyBkZSB1bSBtZXNtbyBwYXLDqm50ZXNlczo8YnIvPlxuICAgICAgICAgICAgICBTZWxlY3QgQXZnKHRvdGFsL3F1YW50aWRhZGUpIEZyb20gcGVkaWRvczxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIEVzdGEgc2VudGVuw6dhIGTDoSBjb21vIHJlc3VsdGFkbyBvIHByZcOnbyBtw6lkaW8gcXVlIGVzdMOjbyBzZW5kbyB2ZW5kaWRvcyBvcyBsaXZyb3MuIEVzdGUgcmVzdWx0YWRvIG7Do28gdGVtIHBvcnF1w6ogY29pbmNpZGlyIGNvbSBvIGRvIHByZcOnbyBtw6lkaW8gZG9zIGxpdnJvcyBwcmVzZW50ZXMgbm8gaW52ZW50w6FyaW8sIGrDoSBxdWUsIHBvZGUgc2VyIHF1ZSBhcyBwZXNzb2FzIHRlbmhhbSB0ZW5kw6puY2lhIGEgY29tcHJhciBvcyBsaXZyb3MgY2Fyb3Mgb3Ugb3MgYmFyYXRvczo8YnIvPlxuICAgICAgICAgICAgICBTZWxlY3QgQXZnKHByZWNpbykgYXMgcHJlY29fdmVuZGEgRnJvbSBhcnRpZ29zPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgVW1hIGNsw6F1c3VsYSBpbnRlcmVzc2FudGUgbm8gdXNvIGRhcyBmdW7Dp8O1ZXMgw6kgR3JvdXAgQnkuIEVzdGEgY2zDoXVzdWxhIG5vcyBwZXJtaXRlIGFncnVwYXIgcmVnaXN0cm9zIGFvcyBxdWFpcyB2YW1vcyBhcGxpY2FyIGEgZnVuw6fDo28uIFBvZGVtb3MgcG9yIGV4ZW1wbG8gY2FsY3VsYXIgbyBkaW5oZWlybyBnYXN0YWRvIHBvciBjYWRhIGNsaWVudGU6PGJyLz5cbiAgICAgICAgICAgICAgc2VsZWN0IGlkX2NsaWVudGUsIFNvbWEodG90YWwpIGFzIHNvbWFfcGVkaWRvcyBGcm9tIHBlZGlkb3MgR3JvdXAgQnkgaWRfY2xpZW50ZTxici8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIE91IHNhYmVyIG8gbsO6bWVybyBkZSBwZWRpZG9zIHF1ZSBmb3JhbSByZWFsaXphZG9zOjxici8+XG4gICAgICAgICAgICAgIFNlbGVjdCBpZF9jbGllbnRlLCBDb3VudCgqKSBhcyBudW1lcm9fcGVkaWRvcyBGcm9tIHBlZGlkb3MgR3JvdXAgQnkgaWRfY2xpZW50ZTxici8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxJbWcgXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9jb2RpZ28vbG9nb3NxbC5zdmdcIlxuICAgICAgICAgICAgICAgICAgd2lkdGg9XCIyMDBweFwiXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIyMDBweFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJMb2dvIHNxbFwiXG4gICAgICAgICAgICAgICAgICB0aXRsZT1cIkxvZ28gc3FsXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiQ2xhc3NMb2dvc3FsXCJcbiAgICAgICAgICAgICAgICAgIG1vZG89e21vZG99PlxuICAgICAgICAgICAgPC9JbWc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvRGl2PlxuICAgICAgPC9MYXlvdXQ+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5oMXtcbiAgICAgICAgICBjb2xvciA6ICMwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgLnB7XG4gICAgICAgICAgY29sb3IgOiAjMDAwMDAwO1xuICAgICAgICB9XG4gICAgYH08L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvZGlnb0phdmFcbiJdfQ== */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/codigo/bancodedados/sql.js */\"));\n};\n\nexport default codigoJava;","map":{"version":3,"sources":["/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/codigo/bancodedados/sql.js"],"names":["React","Img","Div","Layout","MoHead","DivCodigo","Util","codigoJava","props","console","log","regiao","validaProps","modo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Img from '../../../atoms/atImg/index.js'\nimport Div from '../../../atoms/atDiv/index.js'\nimport Layout from '../../../moleculas/layout'\nimport MoHead from '../../../moleculas/moHead'\nimport DivCodigo from '../../../atoms/atDivCodigo'\n//import DivNaveg from '../../../atoms/atDivNaveg'\nimport * as Util from '../../../../controller/util.js';\n\nconst codigoJava = function (props) {\n\n  console.log('╔═══════════════════════════╗');\n  console.log('║    Tutorial  sql       ║');\n  console.log('╚═══════════════════════════╝');\n\n  var regiao = Util.validaProps(props.regiao , \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n\n  return (\n    <div>\n      <MoHead \n        modo={modo} \n        title=\"SQL\" \n        description=\"SQL\" \n        canonical=\"/tutorial/sql/\"/>\n      <Layout regiao={regiao} modo={modo} titulo=\"Tutoriais\" categoria=\"sql\">\n        <Div display=\"responcivo\">\n          <div className=\"coluna404\">\n            <h1>SQL</h1>\n            <h3>O que é SQL?</h3>\n              <p>\n                SQL, ou Structured Query Language, ou Linguagem de Consulta Estruturada, é a linguagem de pesquisa declarativa padrão para banco de dados relacional (base de dados relacional).\n                As características originais do SQL foram inspiradas na álgebra relacional.\n              </p>\n            <h3>A linguagem:</h3>\n              <DivCodigo titulo=\"Adicionar um novo registro\">\n                Insert Into clientes  (nome, sobrenomes, endereço, cidade, código postal, e-mail, pedidos) Values ('Pedro', 'Palotes', 'Percebe n°13', 'Londrina', '123456', 'pedro@criarweb.com', 33)<br/>\n              </DivCodigo>\n              Insert Into nome_tabela (nome_campo1, nome_campo2,...) Values (valor_campo1, valor_campo2...)<br/>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Apagar um registro\">\n                Delete From nome_tabela Where condicoes_de_selecao<br/>\n              </DivCodigo>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Atualizar um registro\">\n                Update clientes Set nome='José' Where nome='Pedro' <br/>\n              </DivCodigo>\n              Update nome_tabela Set nome_campo1 = valor_campo1, nome_campo2 = valor_campo2,... Where condicoes_de_selecao<br/>\n              \n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Seleção de tabelas I:\">\n              Select * From clientes<br/>\n              </DivCodigo>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Mostrar os clientes da cidade 'Rio de janeiro':\">\n              Select * From clientes Where cidade Like 'Rio de janeiro'<br/>\n              </DivCodigo>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Ordenar o resultado pelo campo nome:\">\n              Select * From clientes Where cidade Like 'Rio de janeiro' Order By nome<br/>\n              </DivCodigo>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"Ordenar o resultado pelos campos nome e sobrenome:\">\n              Select * From clientes Where cidade Like 'Rio de Janeiro' Order By nome, sobrenome<br/>\n              </DivCodigo>\n              <br/>\n              <br/>\n              <DivCodigo titulo=\"É possível também usar ordem inversa:\">\n              Select * From clientes Order By pedidos Decres<br/>\n              </DivCodigo>\n              <br/>\n              Uma opção interessante é a de efetuar seleções sem coincidência. Se por exemplo, <br/>\n              buscássemos saber em que cidades se encontram nossos clientes sem a necessidade de que para isso apareça várias vezes a mesma cidade,<br/>\n              usaríamos uma sentença desta classe:<br/>\n              Ex.: Select Distinct cidade From clientes Order By cidade <br/>\n              <br/>\n              Nesta sentença selecionamos todos os clientes de Salvador cujo nome não seja Jose. Como se pode ver, empregamos Like ao invés de = simplesmente para evitar inconvenientes devido ao emprego ou não de maiúsculas.<br/>\n              Select * From clientes Where cidade Like 'salvador' And Not nome Like 'Jose'<br/>\n              <br/>\n              Se quiséssemos recolher em uma seleção aos clientes de nossa tabela cujo sobrenome começa por A e cujo número de pedidos esteja compreendido entre 20 e 40:<br/>\n              Select * From clientes Where sobrenomes like 'A%' And pedidos Between 20 And 40<br/>\n              <br/>\n              O operador In, será visto mais adiante, é muito prático para consultas em várias tabelas. Para casos em uma única tabela é empregada da seguinte forma:<br/>\n              Select * From clientes Where cidade In ('Salvador','Fortaleza','Florianopolis') <br/>\n              <br/>\n              <br/>\n              Select em varias tabelas:<br/>\n              Select clientes.sobrenomes, clientes.email From clientes,pedidos Where pedidos.data like '25/02/00' And pedidos.id_cliente= clientes.id_cliente<br/>\n              Select pedidos.id_pedido, artigos.titulo From pedidos, artigos Where pedidos.id_artigo=artigos.id_artigo <br/>\n              <br/>\n              <br/>\n              Dado que o campo da função não existe no banco de dados, pois o estamos gerando virtualmente, isto pode criar inconvenientes quando estivermos trabalhando com nossos scripts na hora de tratar seu valor e seu nome de campo. É por isso que o valor da função tem que ser recuperada a partir de um apelido que nós especificaremos na sentença SQL a partir da instrução AS. A coisa poderia ficar assim:<br/>\n              Select Soma(total) As soma_pedidos From pedidos<br/>\n              <br/>\n              A partir desta sentença calculamos a soma dos valores de todos os pedidos realizados e armazenamos esse valor em um campo virtual chamado soma_pedidos que poderá ser utilizado como qualquer outro campo por nossas páginas dinâmicas.<br/>\n              <br/>\n              Obviamente, tudo que foi visto até agora pode ser aplicado neste tipo de funções de modo que, por exemplo, podemos estabelecer condições com a cláusula Where construindo sentenças como esta:<br/>\n              Select Soma(quantidade) as soma_artigos From pedidos Where id_artigo=6<br/>\n              <br/>\n              Isto nos proporcionaria a quantidade de exemplares de um determinado livro que foram vendidos.<br/>\n              <br/>\n              Outra propriedade interessante destas funções é que permitem realizar operações com vários campos dentro de um mesmo parênteses:<br/>\n              Select Avg(total/quantidade) From pedidos<br/>\n              <br/>\n              Esta sentença dá como resultado o preço médio que estão sendo vendidos os livros. Este resultado não tem porquê coincidir com o do preço médio dos livros presentes no inventário, já que, pode ser que as pessoas tenham tendência a comprar os livros caros ou os baratos:<br/>\n              Select Avg(precio) as preco_venda From artigos<br/>\n              <br/>\n              Uma cláusula interessante no uso das funções é Group By. Esta cláusula nos permite agrupar registros aos quais vamos aplicar a função. Podemos por exemplo calcular o dinheiro gastado por cada cliente:<br/>\n              select id_cliente, Soma(total) as soma_pedidos From pedidos Group By id_cliente<br/>\n              <br/>\n              Ou saber o número de pedidos que foram realizados:<br/>\n              Select id_cliente, Count(*) as numero_pedidos From pedidos Group By id_cliente<br/>\n          </div>\n          <div>\n            <Img \n                  src=\"/static/assetsv5/img/codigo/logosql.svg\"\n                  width=\"200px\"\n                  height=\"200px\"\n                  alt=\"Logo sql\"\n                  title=\"Logo sql\"\n                  class=\"ClassLogosql\"\n                  modo={modo}>\n            </Img>\n          </div>\n        </Div>\n      </Layout>\n      <style jsx>{`\n        .h1{\n          color : #000000;\n        }\n        .p{\n          color : #000000;\n        }\n    `}</style>\n    </div>\n  )\n}\n\nexport default codigoJava\n"]},"metadata":{},"sourceType":"module"}