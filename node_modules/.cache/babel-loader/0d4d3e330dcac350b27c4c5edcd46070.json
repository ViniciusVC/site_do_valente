{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React, { Children } from \"react\";\nimport * as Util from \"../../../controller/util.js\";\n\nvar btSubmit = function btSubmit(props) {\n  var varValue = Util.validaProps(props.value, \"\");\n  var varHref = Util.validaProps(props.href, \"www.oi.com.br\");\n  var varEstilo = Util.validaProps(props.estilo, \"\");\n  var varWidth = Util.validaProps(props.width, \"\");\n  var varWidthMobile = Util.validaProps(props.mobilewidth, \"\");\n\n  if (varEstilo == \"laranja\") {\n    return (// Botão do formulário Meus Documentos.\n      React.createElement(\"div\", {\n        className: \"jsx-1202028937\"\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-1202028937\" + \" \" + \"btLinklaranja\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"1202028937\"\n      }, \".btLinklaranja.jsx-1202028937{font-family:oiTextRegular,sans-serif;background-color:#f8562c;background-image:linear-gradient(260deg,#fb851c,#f8562c);border-radius:6px;color:#ffffff;display:block;font-size:1rem;height:3.42857143rem;text-align:center;width:280px;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;outline:0;margin:0;padding:1.2rem;box-sizing:border-box;font-style:normal;-webkit-transition-duration:1s;transition-duration:1s;}.btLinklaranja.jsx-1202028937:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#f8562c;border:solid 1px #fb851c;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    ); //transition: background-image: 2s, transform 2s;\n    //-webkit-transition: width 2s, height 2s, background-color 2s, -webkit-transform 2s;\n    //transition-delay: 0.5s //espera pra\n    //transition: all 0.8s;\n    //-webkit-transition: all 0.8s;\n    //-moz-transition: all 0.8s;\n    //-o-transition: all 0.8s;\n  } else if (varEstilo == \"itemLuzVerde\") {\n    return (// Botão luz.\n      React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-2357720705\" + \" \" + \"btLuzA\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2357720705\" + \" \" + \"btLuz\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-2357720705\" + \" \" + \"btLuz1\"\n      }), React.createElement(\"div\", {\n        className: \"jsx-2357720705\" + \" \" + \"btLuz2\"\n      }, varValue), React.createElement(\"div\", {\n        className: \"jsx-2357720705\" + \" \" + \"btLuz3\"\n      })), React.createElement(_JSXStyle, {\n        id: \"2357720705\"\n      }, \".btLuz.jsx-2357720705{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;width:100%;max-width:500px;padding :0;margin:0;}.btLuzA.jsx-2357720705{-webkit-text-decoration:none;text-decoration:none;color:#10ecf5;}.btLuzA.jsx-2357720705:hover{color:#ffffff;}.btLuzA.jsx-2357720705:hover .btLuz1.jsx-2357720705{background-image:url(\\\"/static/assetsv5/img/layout_luz/item_luz_01_hover.png\\\");}.btLuzA.jsx-2357720705:hover .btLuz2.jsx-2357720705{background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_02_hover.png\\\");}.btLuzA.jsx-2357720705:hover .btLuz3.jsx-2357720705{background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_03_hover.png\\\");}.btLuz1.jsx-2357720705{width:18px;background-image:url(\\\"/static/assetsv5/img/layout_luz/item_luz_01.png\\\");padding:0px;margin:0;}.btLuz2.jsx-2357720705{min-width:150px;padding:10px;background-image:url(\\\"/static/assetsv5/img/layout_luz/item_luz_02.png\\\");text-align:center;font-family:sans-serif;display:block;font-size:1rem;cursor:pointer;outline:0;font-style:normal;margin:0;}.btLuz3.jsx-2357720705{width:15px;background-image:url(\\\"/static/assetsv5/img/layout_luz/item_luz_03.png\\\");padding:0px;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"luz\") {\n    return (// Botão luz.\n      React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-85080994\" + \" \" + \"btLuzA\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-85080994\" + \" \" + \"btLuz\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-85080994\" + \" \" + \"btLuz1\"\n      }), React.createElement(\"div\", {\n        className: \"jsx-85080994\" + \" \" + \"btLuz2\"\n      }, varValue), React.createElement(\"div\", {\n        className: \"jsx-85080994\" + \" \" + \"btLuz3\"\n      })), React.createElement(_JSXStyle, {\n        id: \"85080994\"\n      }, \".btLuz.jsx-85080994{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;width:100%;max-width:500px;padding :0;margin:0;}.btLuzA.jsx-85080994{-webkit-text-decoration:none;text-decoration:none;color:#10ecf5;}.btLuzA.jsx-85080994:hover{color:#ffffff;}.btLuzA.jsx-85080994:hover .btLuz1.jsx-85080994{background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_01_hover.png\\\");}.btLuzA.jsx-85080994:hover .btLuz2.jsx-85080994{background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_02_hover.png\\\");}.btLuzA.jsx-85080994:hover .btLuz3.jsx-85080994{background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_03_hover.png\\\");}.btLuz1.jsx-85080994{width:17px;background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_01.png\\\");padding:0px;margin:0;}.btLuz2.jsx-85080994{min-width:180px;padding:10px;background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_02.png\\\");text-align:center;font-family:sans-serif;display:block;font-size:1rem;cursor:pointer;outline:0;font-style:normal;margin:0;}.btLuz3.jsx-85080994{width:15px;background-image:url(\\\"/static/assetsv5/img/layout_luz/but_luz_03.png\\\");padding:0px;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"cinza\") {\n    return (// Botão cinza site valente.\n      React.createElement(\"div\", {\n        className: \"jsx-2154427074\"\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-2154427074\" + \" \" + \"btCinza\"\n      }, varValue, \" \"), React.createElement(_JSXStyle, {\n        id: \"2154427074\"\n      }, \".btCinza.jsx-2154427074{padding:10px;-webkit-transition:all 0.8s;transition:all 0.8s;font-family:oiTextRegular,sans-serif;background-color:#26293c;border-radius:15px;color:#ffffff;display:block;font-size:1rem;text-align:center;-webkit-text-decoration:none;text-decoration:none;border:solid 2px #4a516b;cursor:pointer;outline:0;margin:0;box-sizing:border-box;font-style:normal;width:100%;max-width:500px;}.btCinza.jsx-2154427074:hover{-webkit-transition:all 0.8s;transition:all 0.8s;-webkit-transition:all 0.8s;-moz-transition:all 0.8s;-o-transition:all 0.8s;background-color:#4a516b;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"rosa\") {\n    return (// Botão de ENTRAR no minha Oi.\n      React.createElement(\"div\", {\n        className: \"jsx-634642632\"\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-634642632\" + \" \" + \"btLinkRosa\"\n      }, varValue, \" \"), React.createElement(_JSXStyle, {\n        id: \"634642632\"\n      }, \".btLinkRosa.jsx-634642632{padding:10px;-webkit-transition:all 0.8s;transition:all 0.8s;font-family:oiTextRegular,sans-serif;background-color:#d82482;border-radius:3px;color:#ffffff;display:block;font-size:1rem;text-align:center;-webkit-text-decoration:none;text-decoration:none;border:solid 2px #d82482;cursor:pointer;outline:0;margin:0;box-sizing:border-box;font-style:normal;width:100%;max-width:500px;}.btLinkRosa.jsx-634642632:hover{-webkit-transition:all 0.8s;transition:all 0.8s;-webkit-transition:all 0.8s;-moz-transition:all 0.8s;-o-transition:all 0.8s;color:#d82482;background-color:#ffffff;border:solid 1px #d82482;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"rosa-invetido\") {\n    return (// Botão usado no minha Oi.\n      React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"1340125093\", [varWidth]]])\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: _JSXStyle.dynamic([[\"1340125093\", [varWidth]]]) + \" \" + \"btLinkRosaInvetido\"\n      }, varValue, \" \"), React.createElement(_JSXStyle, {\n        id: \"1340125093\",\n        dynamic: [varWidth]\n      }, \".btLinkRosaInvetido.__jsx-style-dynamic-selector{padding:10px;-webkit-transition:all 0.8s;transition:all 0.8s;font-family:oiTextRegular,sans-serif;background-color:#d82482;border-radius:3px;display:block;font-size:1rem;text-align:center;-webkit-text-decoration:none;text-decoration:none;cursor:pointer;outline:0;margin:0;font-style:normal;width:\".concat(varWidth, \";max-width:500px;color:#d82482;background-color:#ffffff;border:solid 1px #d82482;}.btLinkRosaInvetido.__jsx-style-dynamic-selector:hover{-webkit-transition:all 0.8s;transition:all 0.8s;-webkit-transition:all 0.8s;-moz-transition:all 0.8s;-o-transition:all 0.8s;color:#ffffff;border:solid 1px #d82482;background-color:#d82482;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\")))\n    );\n  } else if (varEstilo == \"rosa-invetido-curto\") {\n    return (// Botão usado no minha Oi.\n      React.createElement(\"div\", {\n        className: _JSXStyle.dynamic([[\"1875886023\", [varWidth, varWidthMobile]]])\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: _JSXStyle.dynamic([[\"1875886023\", [varWidth, varWidthMobile]]]) + \" \" + \"btLinkRosaInvetidoCurto\"\n      }, varValue, \" \"), React.createElement(_JSXStyle, {\n        id: \"1875886023\",\n        dynamic: [varWidth, varWidthMobile]\n      }, \".btLinkRosaInvetidoCurto.__jsx-style-dynamic-selector{box-sizing:border-box;display:inline-block;position:relative;width:\".concat(varWidth, \";font-weight:400;font-style:normal;font-size:1rem;line-height:normal;-webkit-letter-spacing:normal;-moz-letter-spacing:normal;-ms-letter-spacing:normal;letter-spacing:normal;text-align:center;background-color:transparent;color:rgb(216,36,130);padding:20px;margin-top:25px;margin-bottom:60px;border-width:1px;border-style:solid;border-image:initial;border-radius:4px;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:all 0.3s ease 0s;transition:all 0.3s ease 0s;outline:none;border-color:rgb(216,36,130);}.btLinkRosaInvetidoCurto.__jsx-style-dynamic-selector:hover{-webkit-transition:all 0.8s;transition:all 0.8s;-webkit-transition:all 0.8s;-moz-transition:all 0.8s;-o-transition:all 0.8s;color:#ffffff;border:solid 1px #d82482;background-color:#d82482;}@media (max-width:520px){.btLinkRosaInvetidoCurto.__jsx-style-dynamic-selector{width:\").concat(varWidthMobile, \";}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\")))\n    );\n  } else if (varEstilo == \"laraja-degrade\") {\n    return React.createElement(\"div\", {\n      className: \"jsx-3783963777\"\n    }, React.createElement(\"a\", {\n      href: varHref,\n      className: \"jsx-3783963777\" + \" \" + \"btLinkLaranjaDegrade\"\n    }, varValue, \" \"), React.createElement(_JSXStyle, {\n      id: \"3783963777\"\n    }, \".btLinkLaranjaDegrade.jsx-3783963777{display:inline-block;position:relative;width:100%;max-width:16.875rem;border-radius:4px;background-color:rgb(255,215,0);font-family:\\\"SimplonBP-Regular\\\";font-weight:400;font-style:normal;line-height:normal;-webkit-letter-spacing:normal;-moz-letter-spacing:normal;-ms-letter-spacing:normal;letter-spacing:normal;text-align:center;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:all 0.3s ease 0s;transition:all 0.3s ease 0s;outline:currentcolor none medium;background-image:linear-gradient( 281deg, rgb(254,107,3) -100%, rgb(227,52,101) );color:rgb(255,255,255);font-size:1.125rem;box-shadow:rgba(0,0,0,0.2) 10px 13px 20px -3px;border:medium none;padding:16.5px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"));\n  } else if (varEstilo == \"amarelo1\") {\n    return (// Botão de eu quero no minha Oi.\n      React.createElement(\"div\", {\n        className: \"jsx-1843871680\"\n      }, React.createElement(\"a\", {\n        id: \"euquero\",\n        href: varHref,\n        className: \"jsx-1843871680\" + \" \" + \"btLinkAmarelo1\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"1843871680\"\n      }, \".btLinkAmarelo1.jsx-1843871680{-webkit-transition-duration:1s;transition-duration:1s;font-family:oiTextRegular,sans-serif;font-size:1rem;background-color:#ffd700;border-radius:0.28571429rem;color:#222;display:block;height:2.2rem;text-align:center;width:196px;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;outline:0;margin:0;padding:0.6rem 2.5rem;box-sizing:border-box;border:solid 2px #ffd700;}.btLinkAmarelo1.jsx-1843871680:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#222;border:solid 2px #ffd700;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL29pNDAyODI1L0RvY3VtZW50b3MvUHJvamV0b3Mvc2l0ZV9kb192YWxlbnRlL2NvbXBvbmVudHMvYXRvbXMvYXRCdExpbmsvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ1pvQixBQUdvQyxBQXNCQSxzREFyQmUsQUFzQjNCLFdBQ2MseUJBQ0EsQ0F2QlYsZUFFVSxTQXNCSCxnQkFyQk0sTUFzQjlCLHNCQXJCYSxXQUNHLGNBRUEsY0FDSSxrQkFDTixZQUNTLGtEQUNXLGdDQUNqQixlQUNMLFVBQ0QsU0FDYSxzQkFDQSxzQkFDRyx5QkFDM0IiLCJmaWxlIjoiL2hvbWUvb2k0MDI4MjUvRG9jdW1lbnRvcy9Qcm9qZXRvcy9zaXRlX2RvX3ZhbGVudGUvY29tcG9uZW50cy9hdG9tcy9hdEJ0TGluay9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgVXRpbCBmcm9tIFwiLi4vLi4vLi4vY29udHJvbGxlci91dGlsLmpzXCI7XG5cbmNvbnN0IGJ0U3VibWl0ID0gcHJvcHMgPT4ge1xuICB2YXIgdmFyVmFsdWUgPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLnZhbHVlLCBcIlwiKTtcbiAgdmFyIHZhckhyZWYgPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLmhyZWYsIFwid3d3Lm9pLmNvbS5iclwiKTtcbiAgdmFyIHZhckVzdGlsbyA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMuZXN0aWxvLCBcIlwiKTtcbiAgdmFyIHZhcldpZHRoID0gVXRpbC52YWxpZGFQcm9wcyhwcm9wcy53aWR0aCwgXCJcIik7XG4gIHZhciB2YXJXaWR0aE1vYmlsZSA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMubW9iaWxld2lkdGgsIFwiXCIpO1xuXG4gIGlmICh2YXJFc3RpbG8gPT0gXCJsYXJhbmphXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRvIGZvcm11bMOhcmlvIE1ldXMgRG9jdW1lbnRvcy5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua2xhcmFuamFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtsYXJhbmphIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBvaVRleHRSZWd1bGFyLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NTYyYztcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgyNjBkZWcsICNmYjg1MWMsICNmODU2MmMpO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIGhlaWdodDogMy40Mjg1NzE0M3JlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHdpZHRoOiAyODBweDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAjZGJkYmRiO1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgb3V0bGluZTogMDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEuMnJlbTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua2xhcmFuamE6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBjb2xvcjogI2Y4NTYyYztcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNmYjg1MWM7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gICAgLy90cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWltYWdlOiAycywgdHJhbnNmb3JtIDJzO1xuICAgIC8vLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAycywgaGVpZ2h0IDJzLCBiYWNrZ3JvdW5kLWNvbG9yIDJzLCAtd2Via2l0LXRyYW5zZm9ybSAycztcbiAgICAvL3RyYW5zaXRpb24tZGVsYXk6IDAuNXMgLy9lc3BlcmEgcHJhXG4gICAgLy90cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAvLy13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgLy8tbW96LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgIC8vLW8tdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiaXRlbUx1elZlcmRlXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGx1ei5cbiAgICAgIDxhIGNsYXNzTmFtZT1cImJ0THV6QVwiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejFcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6MlwiPnt2YXJWYWx1ZX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6M1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idEx1entcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgICAgcGFkZGluZyA6MDtcbiAgICAgICAgICAgIG1hcmdpbjowO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBe1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgY29sb3I6ICMxMGVjZjU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idEx1ekE6aG92ZXIge1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICAvKiAuYnRMdXoyIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAyX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICAgIH0gKi9cbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXoxeyBcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9pdGVtX2x1el8wMV9ob3Zlci5wbmdcIik7XG4gICAgICAgICAgfSBcbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejJ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDJfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejN7IFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDNfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXoxe1xuICAgICAgICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAxLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MntcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTUwcHg7XG4gICAgICAgICAgICAvKm1heC13aWR0aDogNDY4cHg7Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAyLnBuZ1wiKTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXoze1xuICAgICAgICAgICAgd2lkdGg6IDE1cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAzLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvYT5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImx1elwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBsdXouXG4gICAgICA8YSBjbGFzc05hbWU9XCJidEx1ekFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1elwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRMdXoxXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejJcIj57dmFyVmFsdWV9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejNcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMdXp7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgIHBhZGRpbmcgOjA7XG4gICAgICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QXtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGNvbG9yOiAjMTBlY2Y1O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIHtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejF7IFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDFfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH0gXG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXoye1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAyX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXozeyBcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAzX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MXtcbiAgICAgICAgICAgIHdpZHRoOiAxN3B4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAxLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MntcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTgwcHg7XG4gICAgICAgICAgICAvKm1heC13aWR0aDogNDY4cHg7Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDIucG5nXCIpO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idEx1ejN7XG4gICAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9zdGF0aWMvYXNzZXRzdjUvaW1nL2xheW91dF9sdXovYnV0X2x1el8wMy5wbmdcIik7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfWVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImNpbnphXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGNpbnphIHNpdGUgdmFsZW50ZS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0Q2luemFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9e1wiIFwifVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRDaW56YSB7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjI5M2M7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggIzRhNTE2YjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRDaW56YTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAvKmNvbG9yOiAjZDgyNDgyOyovXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGE1MTZiO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfWVsc2UgaWYgKHZhckVzdGlsbyA9PSBcInJvc2FcIikge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBCb3TDo28gZGUgRU5UUkFSIG5vIG1pbmhhIE9pLlxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRMaW5rUm9zYVwiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX17XCIgXCJ9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtSb3NhIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBvaVRleHRSZWd1bGFyLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q4MjQ4MjtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNkODI0ODI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua1Jvc2E6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgY29sb3I6ICNkODI0ODI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2Q4MjQ4MjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwicm9zYS1pbnZldGlkb1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyB1c2FkbyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua1Jvc2FJbnZldGlkb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX17XCIgXCJ9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtSb3NhSW52ZXRpZG8ge1xuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDgyNDgyO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgd2lkdGg6ICR7dmFyV2lkdGh9O1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgIGNvbG9yOiAjZDgyNDgyO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNkODI0ODI7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtSb3NhSW52ZXRpZG86aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjZDgyNDgyO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q4MjQ4MjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwicm9zYS1pbnZldGlkby1jdXJ0b1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyB1c2FkbyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfXtcIiBcIn1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvIHtcblx0XHQgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICB3aWR0aDogJHt2YXJXaWR0aH07XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMjE2LCAzNiwgMTMwKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyNXB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgIGJvcmRlci1pbWFnZTogaW5pdGlhbDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2IoMjE2LCAzNiwgMTMwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtby10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2Q4MjQ4MjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkODI0ODI7XG4gICAgICAgICAgfVxuICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkge1xuICAgICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvIHtcbiAgICAgICAgICAgICAgd2lkdGg6ICR7dmFyV2lkdGhNb2JpbGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJsYXJhamEtZGVncmFkZVwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua0xhcmFuamFEZWdyYWRlXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfXtcIiBcIn1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0xhcmFuamFEZWdyYWRlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxNi44NzVyZW07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyMTUsIDApO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiU2ltcGxvbkJQLVJlZ3VsYXJcIjtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gICAgICAgICAgICBvdXRsaW5lOiBjdXJyZW50Y29sb3Igbm9uZSBtZWRpdW07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAgIDI4MWRlZyxcbiAgICAgICAgICAgICAgcmdiKDI1NCwgMTA3LCAzKSAtMTAwJSxcbiAgICAgICAgICAgICAgcmdiKDIyNywgNTIsIDEwMSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjEyNXJlbTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4yKSAxMHB4IDEzcHggMjBweCAtM3B4O1xuICAgICAgICAgICAgYm9yZGVyOiBtZWRpdW0gbm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE2LjVweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiYW1hcmVsbzFcIikge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBCb3TDo28gZGUgZXUgcXVlcm8gbm8gbWluaGEgT2kuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtBbWFyZWxvMVwiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8xIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG5cbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmQ3MDA7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI4NTcxNDI5cmVtO1xuICAgICAgICAgICAgY29sb3I6ICMyMjI7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcblxuICAgICAgICAgICAgaGVpZ2h0OiAyLjJyZW07XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogMTk2cHg7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjZyZW0gMi41cmVtO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNmZmQ3MDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtBbWFyZWxvMTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggI2ZmZDcwMDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJhbWFyZWxvMlwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkZSBldSBxdWVybyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua0FtYXJlbG8yXCIgaWQ9XCJldXF1ZXJvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMaW5rQW1hcmVsbzIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxOHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDcwMDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBoZWlnaHQ6IDMuOHJlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggI2ZmZDcwMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8yOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgY29sb3I6ICMyMjI7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDJweCAjZmZkNzAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImFtYXJlbG8zXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRlIFwiZXUgcXVlcm9cIiBPQ0MuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtBbWFyZWxvM1wiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8zIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDcwMDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjg1NzE0MjlyZW07XG4gICAgICAgICAgICBjb2xvcjogIzIyMjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjE0Mjg1NzE0cmVtO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDM3LjVyZW07IC8qNjAwKi9cblxuICAgICAgICAgICAgaGVpZ2h0OiAzLjQyODU3MTQzcmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJTaW1wbG9uQlAtUmVndWxhclwiLCBBcmlhbDtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAvKm1hcmdpbi10b3A6IDEuMjg1NzE0MjlyZW07Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDAuODU3MTQyODZyZW0gMjBweDtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDJweCAjZmZkNzAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMaW5rQW1hcmVsbzM6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBjb2xvcjogIzIyMjtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNmZmQ3MDA7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiUHVycGxlMVwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkbyBNaW5oYSBPaSBuYSBob21lIGRvIHNpdGUgU0VPLlxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRMaW5rUHVycGxlMVwiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua1B1cnBsZTEge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGYyNWU1O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGhlaWdodDogMy44cmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IDE0M3B4O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMS4ycmVtO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMaW5rUHVycGxlMTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICAgIGNvbG9yOiAjOGYyNWU1O1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggIzhmMjVlNTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJQdXJwbGUyXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRvIE1pbmhhIE9pIG5hIGhvbWUgZG8gc2l0ZSBTRU8uXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtQdXJwbGUxXCIgaWQ9XCJldXF1ZXJvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMaW5rUHVycGxlMSB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4ZjI1ZTU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOyAvKjE2cHgqL1xuICAgICAgICAgICAgaGVpZ2h0OiAzLjJyZW07XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogMTY5cHg7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAxLjJyZW07XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtQdXJwbGUxOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgY29sb3I6ICM4ZjI1ZTU7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjOGYyNWU1O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImJyYW5jb1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkbyBmb3JtdWzDoXJpbyBNZXVzIERvY3VtZW50b3MuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtCcmFuY29cIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9XG4gICAgICAgIDwvYT5cbiAgICAgICAgey8qIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wIDogMjBweDtcbiAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7ICovfVxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0JyYW5jbyB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICBjb2xvcjogIzIyMjIyMjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOyAvKjE2cHgqL1xuICAgICAgICAgICAgaGVpZ2h0OiAzLjQyODU3MTQzcmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IDMwMHB4O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAxLjJyZW07XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC41cztcbiAgICAgICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogMnB4IDJweCAyMHB4IHJnYmEoMSwgMSwgMSwgMC4xNyk7XG4gICAgICAgICAgICAtbW96LWJveC1zaGFkb3c6IDJweCAycHggMjBweCByZ2JhKDEsIDEsIDEsIDAuMTcpO1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMnB4IDJweCAyMHB4IHJnYmEoMSwgMSwgMSwgMC4xNyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtCcmFuY286aG92ZXIge1xuICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAxcHggMXB4IDEwcHggcmdiYSgxLCAxLCAxLCAwLjQ3KTtcbiAgICAgICAgICAgIC1tb3otYm94LXNoYWRvdzogMXB4IDFweCAxMHB4IHJnYmEoMSwgMSwgMSwgMC40Nyk7XG4gICAgICAgICAgICBib3gtc2hhZG93OiAxcHggMXB4IDEwcHggcmdiYSgxLCAxLCAxLCAwLjQ3KTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vU2VtIHBhZHLDo29cbiAgICAgIDxhIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0TGlua1wiPnt2YXJWYWx1ZX08L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmsge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjZGJkYmRiO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgYnRTdWJtaXQ7XG4iXX0= */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"amarelo2\") {\n    return (// Botão de eu quero no minha Oi.\n      React.createElement(\"div\", {\n        className: \"jsx-3556413409\"\n      }, React.createElement(\"a\", {\n        id: \"euquero\",\n        href: varHref,\n        className: \"jsx-3556413409\" + \" \" + \"btLinkAmarelo2\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"3556413409\"\n      }, \".btLinkAmarelo2.jsx-3556413409{-webkit-transition-duration:1s;transition-duration:1s;font-family:oiTextRegular,sans-serif;font-size:1rem;padding-top:18px;background-color:#ffd700;border-radius:3px;color:#222;display:block;height:3.8rem;text-align:center;width:100%;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;box-sizing:border-box;border:solid 2px #ffd700;}.btLinkAmarelo2.jsx-3556413409:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#222;border:solid 2px #ffd700;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"amarelo3\") {\n    return (// Botão de \"eu quero\" OCC.\n      React.createElement(\"div\", {\n        className: \"jsx-3609564126\"\n      }, React.createElement(\"a\", {\n        id: \"euquero\",\n        href: varHref,\n        className: \"jsx-3609564126\" + \" \" + \"btLinkAmarelo3\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"3609564126\"\n      }, \".btLinkAmarelo3.jsx-3609564126{-webkit-transition-duration:1s;transition-duration:1s;background-color:#ffd700;border-radius:0.28571429rem;color:#222;display:block;font-size:1.14285714rem;font-weight:37.5rem;height:3.42857143rem;text-align:center;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;font-family:\\\"SimplonBP-Regular\\\",Arial;outline:0;margin:0;padding:0.85714286rem 20px;box-sizing:border-box;font-style:normal;border:solid 2px #ffd700;}.btLinkAmarelo3.jsx-3609564126:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#222;border:solid 2px #ffd700;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"Purple1\") {\n    return (// Botão do Minha Oi na home do site SEO.\n      React.createElement(\"div\", {\n        className: \"jsx-4084733995\"\n      }, React.createElement(\"a\", {\n        id: \"euquero\",\n        href: varHref,\n        className: \"jsx-4084733995\" + \" \" + \"btLinkPurple1\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"4084733995\"\n      }, \".btLinkPurple1.jsx-4084733995{font-family:oiTextRegular,sans-serif;font-size:1rem;background-color:#8f25e5;border-radius:3px;color:#ffffff;display:block;height:3.8rem;text-align:center;width:143px;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;outline:0;margin:0;padding:1.2rem;box-sizing:border-box;font-style:normal;-webkit-transition-duration:1s;transition-duration:1s;}.btLinkPurple1.jsx-4084733995:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#8f25e5;border:solid 1px #8f25e5;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"Purple2\") {\n    return (// Botão do Minha Oi na home do site SEO.\n      React.createElement(\"div\", {\n        className: \"jsx-2896243747\"\n      }, React.createElement(\"a\", {\n        id: \"euquero\",\n        href: varHref,\n        className: \"jsx-2896243747\" + \" \" + \"btLinkPurple1\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"2896243747\"\n      }, \".btLinkPurple1.jsx-2896243747{font-family:oiTextRegular,sans-serif;background-color:#8f25e5;border-radius:3px;color:#ffffff;display:block;font-size:1rem;height:3.2rem;text-align:center;width:169px;-webkit-text-decoration:none;text-decoration:none;border-bottom:solid 1px #dbdbdb;cursor:pointer;outline:0;margin:0;padding:1.2rem;box-sizing:border-box;font-style:normal;-webkit-transition-duration:1s;transition-duration:1s;}.btLinkPurple1.jsx-2896243747:hover{-webkit-transition-duration:1s;transition-duration:1s;color:#8f25e5;border:solid 1px #8f25e5;background-color:#ffffff;background-image:none;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else if (varEstilo == \"branco\") {\n    return (// Botão do formulário Meus Documentos.\n      React.createElement(\"div\", {\n        className: \"jsx-2015391054\"\n      }, React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-2015391054\" + \" \" + \"btLinkBranco\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"2015391054\"\n      }, \".btLinkBranco.jsx-2015391054{font-family:oiTextRegular,sans-serif;background-color:#ffffff;border-radius:8px;color:#222222;display:block;font-size:1rem;height:3.42857143rem;text-align:center;width:300px;-webkit-text-decoration:none;text-decoration:none;border:solid 1px #dbdbdb;cursor:pointer;outline:0;margin:0;padding:1.2rem;box-sizing:border-box;font-style:normal;-webkit-transition:0.5s;transition:0.5s;-webkit-box-shadow:2px 2px 20px rgba(1,1,1,0.17);-moz-box-shadow:2px 2px 20px rgba(1,1,1,0.17);box-shadow:2px 2px 20px rgba(1,1,1,0.17);}.btLinkBranco.jsx-2015391054:hover{-webkit-box-shadow:1px 1px 10px rgba(1,1,1,0.47);-moz-box-shadow:1px 1px 10px rgba(1,1,1,0.47);box-shadow:1px 1px 10px rgba(1,1,1,0.47);}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL29pNDAyODI1L0RvY3VtZW50b3MvUHJvamV0b3Mvc2l0ZV9kb192YWxlbnRlL2NvbXBvbmVudHMvYXRvbXMvYXRCdExpbmsvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeWxCb0IsQUFHbUQsQUF1QmMscUNBdEIzQixZQXVCd0IsYUF0Qi9CLGtCQUNKLGNBQ0EsQ0FxQjhCLGFBcEI3QixlQUNNLGFBb0J2QixRQW5Cb0Isa0JBQ04sWUFDUyxrREFDSSx5QkFDVixlQUNMLFVBQ0QsU0FDTSxlQUNPLHNCQUNKLGtCQUNGLHdDQUNvQyxpREFDSCw4Q0FDTCx5Q0FDOUMiLCJmaWxlIjoiL2hvbWUvb2k0MDI4MjUvRG9jdW1lbnRvcy9Qcm9qZXRvcy9zaXRlX2RvX3ZhbGVudGUvY29tcG9uZW50cy9hdG9tcy9hdEJ0TGluay9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgVXRpbCBmcm9tIFwiLi4vLi4vLi4vY29udHJvbGxlci91dGlsLmpzXCI7XG5cbmNvbnN0IGJ0U3VibWl0ID0gcHJvcHMgPT4ge1xuICB2YXIgdmFyVmFsdWUgPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLnZhbHVlLCBcIlwiKTtcbiAgdmFyIHZhckhyZWYgPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLmhyZWYsIFwid3d3Lm9pLmNvbS5iclwiKTtcbiAgdmFyIHZhckVzdGlsbyA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMuZXN0aWxvLCBcIlwiKTtcbiAgdmFyIHZhcldpZHRoID0gVXRpbC52YWxpZGFQcm9wcyhwcm9wcy53aWR0aCwgXCJcIik7XG4gIHZhciB2YXJXaWR0aE1vYmlsZSA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMubW9iaWxld2lkdGgsIFwiXCIpO1xuXG4gIGlmICh2YXJFc3RpbG8gPT0gXCJsYXJhbmphXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRvIGZvcm11bMOhcmlvIE1ldXMgRG9jdW1lbnRvcy5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua2xhcmFuamFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtsYXJhbmphIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBvaVRleHRSZWd1bGFyLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4NTYyYztcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgyNjBkZWcsICNmYjg1MWMsICNmODU2MmMpO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIGhlaWdodDogMy40Mjg1NzE0M3JlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHdpZHRoOiAyODBweDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IHNvbGlkIDFweCAjZGJkYmRiO1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgb3V0bGluZTogMDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEuMnJlbTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua2xhcmFuamE6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBjb2xvcjogI2Y4NTYyYztcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNmYjg1MWM7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gICAgLy90cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWltYWdlOiAycywgdHJhbnNmb3JtIDJzO1xuICAgIC8vLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAycywgaGVpZ2h0IDJzLCBiYWNrZ3JvdW5kLWNvbG9yIDJzLCAtd2Via2l0LXRyYW5zZm9ybSAycztcbiAgICAvL3RyYW5zaXRpb24tZGVsYXk6IDAuNXMgLy9lc3BlcmEgcHJhXG4gICAgLy90cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAvLy13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgLy8tbW96LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgIC8vLW8tdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiaXRlbUx1elZlcmRlXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGx1ei5cbiAgICAgIDxhIGNsYXNzTmFtZT1cImJ0THV6QVwiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejFcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6MlwiPnt2YXJWYWx1ZX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0THV6M1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idEx1entcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgICAgcGFkZGluZyA6MDtcbiAgICAgICAgICAgIG1hcmdpbjowO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBe1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgY29sb3I6ICMxMGVjZjU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idEx1ekE6aG92ZXIge1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICAvKiAuYnRMdXoyIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAyX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICAgIH0gKi9cbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXoxeyBcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9pdGVtX2x1el8wMV9ob3Zlci5wbmdcIik7XG4gICAgICAgICAgfSBcbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejJ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDJfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejN7IFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDNfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXoxe1xuICAgICAgICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAxLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MntcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTUwcHg7XG4gICAgICAgICAgICAvKm1heC13aWR0aDogNDY4cHg7Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAyLnBuZ1wiKTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXoze1xuICAgICAgICAgICAgd2lkdGg6IDE1cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2l0ZW1fbHV6XzAzLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvYT5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImx1elwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBsdXouXG4gICAgICA8YSBjbGFzc05hbWU9XCJidEx1ekFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1elwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRMdXoxXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejJcIj57dmFyVmFsdWV9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidEx1ejNcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMdXp7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgIHBhZGRpbmcgOjA7XG4gICAgICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QXtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGNvbG9yOiAjMTBlY2Y1O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIHtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMdXpBOmhvdmVyIC5idEx1ejF7IFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDFfaG92ZXIucG5nXCIpO1xuICAgICAgICAgIH0gXG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXoye1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAyX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6QTpob3ZlciAuYnRMdXozeyBcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAzX2hvdmVyLnBuZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MXtcbiAgICAgICAgICAgIHdpZHRoOiAxN3B4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiL3N0YXRpYy9hc3NldHN2NS9pbWcvbGF5b3V0X2x1ei9idXRfbHV6XzAxLnBuZ1wiKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0THV6MntcbiAgICAgICAgICAgIG1pbi13aWR0aDogMTgwcHg7XG4gICAgICAgICAgICAvKm1heC13aWR0aDogNDY4cHg7Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9sYXlvdXRfbHV6L2J1dF9sdXpfMDIucG5nXCIpO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idEx1ejN7XG4gICAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi9zdGF0aWMvYXNzZXRzdjUvaW1nL2xheW91dF9sdXovYnV0X2x1el8wMy5wbmdcIik7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfWVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImNpbnphXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGNpbnphIHNpdGUgdmFsZW50ZS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0Q2luemFcIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9e1wiIFwifVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRDaW56YSB7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjI5M2M7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggIzRhNTE2YjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDUwMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRDaW56YTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtbW96LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW8tdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAvKmNvbG9yOiAjZDgyNDgyOyovXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGE1MTZiO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfWVsc2UgaWYgKHZhckVzdGlsbyA9PSBcInJvc2FcIikge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBCb3TDo28gZGUgRU5UUkFSIG5vIG1pbmhhIE9pLlxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRMaW5rUm9zYVwiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX17XCIgXCJ9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtSb3NhIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBvaVRleHRSZWd1bGFyLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q4MjQ4MjtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNkODI0ODI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua1Jvc2E6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgY29sb3I6ICNkODI0ODI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2Q4MjQ4MjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwicm9zYS1pbnZldGlkb1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyB1c2FkbyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua1Jvc2FJbnZldGlkb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX17XCIgXCJ9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmtSb3NhSW52ZXRpZG8ge1xuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDgyNDgyO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgd2lkdGg6ICR7dmFyV2lkdGh9O1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICAgICAgICAgIGNvbG9yOiAjZDgyNDgyO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMXB4ICNkODI0ODI7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtSb3NhSW52ZXRpZG86aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1vLXRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjZDgyNDgyO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q4MjQ4MjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwicm9zYS1pbnZldGlkby1jdXJ0b1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyB1c2FkbyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfXtcIiBcIn1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvIHtcblx0XHQgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICB3aWR0aDogJHt2YXJXaWR0aH07XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMjE2LCAzNiwgMTMwKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyNXB4O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgIGJvcmRlci1pbWFnZTogaW5pdGlhbDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2IoMjE2LCAzNiwgMTMwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjhzO1xuICAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gICAgICAgICAgICAtby10cmFuc2l0aW9uOiBhbGwgMC44cztcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2Q4MjQ4MjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkODI0ODI7XG4gICAgICAgICAgfVxuICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkge1xuICAgICAgICAgICAgLmJ0TGlua1Jvc2FJbnZldGlkb0N1cnRvIHtcbiAgICAgICAgICAgICAgd2lkdGg6ICR7dmFyV2lkdGhNb2JpbGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJsYXJhamEtZGVncmFkZVwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua0xhcmFuamFEZWdyYWRlXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfXtcIiBcIn1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0xhcmFuamFEZWdyYWRlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxNi44NzVyZW07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyMTUsIDApO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiU2ltcGxvbkJQLVJlZ3VsYXJcIjtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gICAgICAgICAgICBvdXRsaW5lOiBjdXJyZW50Y29sb3Igbm9uZSBtZWRpdW07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICAgIDI4MWRlZyxcbiAgICAgICAgICAgICAgcmdiKDI1NCwgMTA3LCAzKSAtMTAwJSxcbiAgICAgICAgICAgICAgcmdiKDIyNywgNTIsIDEwMSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjEyNXJlbTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4yKSAxMHB4IDEzcHggMjBweCAtM3B4O1xuICAgICAgICAgICAgYm9yZGVyOiBtZWRpdW0gbm9uZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE2LjVweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiYW1hcmVsbzFcIikge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBCb3TDo28gZGUgZXUgcXVlcm8gbm8gbWluaGEgT2kuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtBbWFyZWxvMVwiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8xIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG5cbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmQ3MDA7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI4NTcxNDI5cmVtO1xuICAgICAgICAgICAgY29sb3I6ICMyMjI7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcblxuICAgICAgICAgICAgaGVpZ2h0OiAyLjJyZW07XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogMTk2cHg7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwLjZyZW0gMi41cmVtO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNmZmQ3MDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtBbWFyZWxvMTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggI2ZmZDcwMDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJhbWFyZWxvMlwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkZSBldSBxdWVybyBubyBtaW5oYSBPaS5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0TGlua0FtYXJlbG8yXCIgaWQ9XCJldXF1ZXJvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMaW5rQW1hcmVsbzIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTsgLyoxNnB4Ki9cbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxOHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDcwMDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgICAgIGNvbG9yOiAjMjIyO1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBoZWlnaHQ6IDMuOHJlbTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAycHggI2ZmZDcwMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8yOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgY29sb3I6ICMyMjI7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDJweCAjZmZkNzAwO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImFtYXJlbG8zXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRlIFwiZXUgcXVlcm9cIiBPQ0MuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtBbWFyZWxvM1wiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0FtYXJlbG8zIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZDcwMDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAuMjg1NzE0MjlyZW07XG4gICAgICAgICAgICBjb2xvcjogIzIyMjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjE0Mjg1NzE0cmVtO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDM3LjVyZW07IC8qNjAwKi9cblxuICAgICAgICAgICAgaGVpZ2h0OiAzLjQyODU3MTQzcmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJTaW1wbG9uQlAtUmVndWxhclwiLCBBcmlhbDtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAvKm1hcmdpbi10b3A6IDEuMjg1NzE0MjlyZW07Ki9cbiAgICAgICAgICAgIHBhZGRpbmc6IDAuODU3MTQyODZyZW0gMjBweDtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDJweCAjZmZkNzAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMaW5rQW1hcmVsbzM6aG92ZXIge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgICBjb2xvcjogIzIyMjtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgMnB4ICNmZmQ3MDA7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodmFyRXN0aWxvID09IFwiUHVycGxlMVwiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkbyBNaW5oYSBPaSBuYSBob21lIGRvIHNpdGUgU0VPLlxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRMaW5rUHVycGxlMVwiIGlkPVwiZXVxdWVyb1wiIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICAgIHt2YXJWYWx1ZX1cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua1B1cnBsZTEge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IG9pVGV4dFJlZ3VsYXIsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07IC8qMTZweCovXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGYyNWU1O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGhlaWdodDogMy44cmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IDE0M3B4O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogc29saWQgMXB4ICNkYmRiZGI7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMS4ycmVtO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYnRMaW5rUHVycGxlMTpob3ZlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAxcztcbiAgICAgICAgICAgIGNvbG9yOiAjOGYyNWU1O1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggIzhmMjVlNTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh2YXJFc3RpbG8gPT0gXCJQdXJwbGUyXCIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLy8gQm90w6NvIGRvIE1pbmhhIE9pIG5hIGhvbWUgZG8gc2l0ZSBTRU8uXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtQdXJwbGUxXCIgaWQ9XCJldXF1ZXJvXCIgaHJlZj17dmFySHJlZn0+XG4gICAgICAgICAge3ZhclZhbHVlfVxuICAgICAgICA8L2E+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuYnRMaW5rUHVycGxlMSB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4ZjI1ZTU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOyAvKjE2cHgqL1xuICAgICAgICAgICAgaGVpZ2h0OiAzLjJyZW07XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogMTY5cHg7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAxLjJyZW07XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtQdXJwbGUxOmhvdmVyIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDFzO1xuICAgICAgICAgICAgY29sb3I6ICM4ZjI1ZTU7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjOGYyNWU1O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9IGVsc2UgaWYgKHZhckVzdGlsbyA9PSBcImJyYW5jb1wiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vIEJvdMOjbyBkbyBmb3JtdWzDoXJpbyBNZXVzIERvY3VtZW50b3MuXG4gICAgICA8ZGl2PlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidExpbmtCcmFuY29cIiBocmVmPXt2YXJIcmVmfT5cbiAgICAgICAgICB7dmFyVmFsdWV9XG4gICAgICAgIDwvYT5cbiAgICAgICAgey8qIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICBtYXJnaW4tdG9wIDogMjBweDtcbiAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7ICovfVxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLmJ0TGlua0JyYW5jbyB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogb2lUZXh0UmVndWxhciwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgICBjb2xvcjogIzIyMjIyMjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOyAvKjE2cHgqL1xuICAgICAgICAgICAgaGVpZ2h0OiAzLjQyODU3MTQzcmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgd2lkdGg6IDMwMHB4O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCAxcHggI2RiZGJkYjtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG91dGxpbmU6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAxLjJyZW07XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC41cztcbiAgICAgICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogMnB4IDJweCAyMHB4IHJnYmEoMSwgMSwgMSwgMC4xNyk7XG4gICAgICAgICAgICAtbW96LWJveC1zaGFkb3c6IDJweCAycHggMjBweCByZ2JhKDEsIDEsIDEsIDAuMTcpO1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMnB4IDJweCAyMHB4IHJnYmEoMSwgMSwgMSwgMC4xNyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5idExpbmtCcmFuY286aG92ZXIge1xuICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAxcHggMXB4IDEwcHggcmdiYSgxLCAxLCAxLCAwLjQ3KTtcbiAgICAgICAgICAgIC1tb3otYm94LXNoYWRvdzogMXB4IDFweCAxMHB4IHJnYmEoMSwgMSwgMSwgMC40Nyk7XG4gICAgICAgICAgICBib3gtc2hhZG93OiAxcHggMXB4IDEwcHggcmdiYSgxLCAxLCAxLCAwLjQ3KTtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8vU2VtIHBhZHLDo29cbiAgICAgIDxhIGhyZWY9e3ZhckhyZWZ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0TGlua1wiPnt2YXJWYWx1ZX08L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5idExpbmsge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xuICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjZGJkYmRiO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PC9zdHlsZT5cbiAgICAgIDwvYT5cbiAgICApO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgYnRTdWJtaXQ7XG4iXX0= */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  } else {\n    return (//Sem padrão\n      React.createElement(\"a\", {\n        href: varHref,\n        className: \"jsx-3585491591\"\n      }, React.createElement(\"div\", {\n        className: \"jsx-3585491591\" + \" \" + \"btLink\"\n      }, varValue), React.createElement(_JSXStyle, {\n        id: \"3585491591\"\n      }, \".btLink.jsx-3585491591{width:100%;padding-top:20px;padding-bottom:20px;color:#000000;cursor:pointer;border-radius:6px;text-align:center;border:solid 1px #dbdbdb;background-color:#ffffff;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js */\"))\n    );\n  }\n};\n\nexport default btSubmit;","map":{"version":3,"sources":["/home/oi402825/Documentos/Projetos/site_do_valente/components/atoms/atBtLink/index.js"],"names":["React","Children","Util","btSubmit","props","varValue","validaProps","value","varHref","href","varEstilo","estilo","varWidth","width","varWidthMobile","mobilewidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,6BAAtB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,MAAIC,QAAQ,GAAGH,IAAI,CAACI,WAAL,CAAiBF,KAAK,CAACG,KAAvB,EAA8B,EAA9B,CAAf;AACA,MAAIC,OAAO,GAAGN,IAAI,CAACI,WAAL,CAAiBF,KAAK,CAACK,IAAvB,EAA6B,eAA7B,CAAd;AACA,MAAIC,SAAS,GAAGR,IAAI,CAACI,WAAL,CAAiBF,KAAK,CAACO,MAAvB,EAA+B,EAA/B,CAAhB;AACA,MAAIC,QAAQ,GAAGV,IAAI,CAACI,WAAL,CAAiBF,KAAK,CAACS,KAAvB,EAA8B,EAA9B,CAAf;AACA,MAAIC,cAAc,GAAGZ,IAAI,CAACI,WAAL,CAAiBF,KAAK,CAACW,WAAvB,EAAoC,EAApC,CAArB;;AAEA,MAAIL,SAAS,IAAI,SAAjB,EAA4B;AAC1B,WACE;AACA;AAAA;AAAA,SACE;AAA6B,QAAA,IAAI,EAAEF,OAAnC;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF,MAD0B,CAuC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA9CD,MA8CO,IAAIK,SAAS,IAAI,cAAjB,EAAiC;AACtC,WACE;AACA;AAAsB,QAAA,IAAI,EAAEF,OAA5B;AAAA,4CAAa;AAAb,SACE;AAAA,4CAAe;AAAf,SACE;AAAA,4CAAe;AAAf,QADF,EAEE;AAAA,4CAAe;AAAf,SAAyBH,QAAzB,CAFF,EAGE;AAAA,4CAAe;AAAf,QAHF,CADF;AAAA;AAAA;AAFF;AAiED,GAlEM,MAkEA,IAAIK,SAAS,IAAI,KAAjB,EAAwB;AAC7B,WACE;AACA;AAAsB,QAAA,IAAI,EAAEF,OAA5B;AAAA,0CAAa;AAAb,SACE;AAAA,0CAAe;AAAf,SACE;AAAA,0CAAe;AAAf,QADF,EAEE;AAAA,0CAAe;AAAf,SAAyBH,QAAzB,CAFF,EAGE;AAAA,0CAAe;AAAf,QAHF,CADF;AAAA;AAAA;AAFF;AA8DD,GA/DM,MA+DD,IAAIK,SAAS,IAAI,OAAjB,EAA0B;AAC9B,WACE;AACA;AAAA;AAAA,SACE;AAAuB,QAAA,IAAI,EAAEF,OAA7B;AAAA,4CAAa;AAAb,SACGH,QADH,EACa,GADb,CADF;AAAA;AAAA;AAFF;AAuCD,GAxCK,MAwCA,IAAIK,SAAS,IAAI,MAAjB,EAAyB;AAC7B,WACE;AACA;AAAA;AAAA,SACE;AAA0B,QAAA,IAAI,EAAEF,OAAhC;AAAA,2CAAa;AAAb,SACGH,QADH,EACa,GADb,CADF;AAAA;AAAA;AAFF;AAwCD,GAzCK,MAyCC,IAAIK,SAAS,IAAI,eAAjB,EAAkC;AACvC,WACE;AACA;AAAA,sDAmBeE,QAnBf;AAAA,SACE;AAAkC,QAAA,IAAI,EAAEJ,OAAxC;AAAA,sDAkBaI,QAlBb,aAAa;AAAb,SACGP,QADH,EACa,GADb,CADF;AAAA;AAAA,kBAmBeO,QAnBf;AAAA,4WAmBeA,QAnBf;AAFF;AAuCD,GAxCM,MAwCA,IAAIF,SAAS,IAAI,qBAAjB,EAAwC;AAC7C,WACE;AACA;AAAA,sDASeE,QATf,EAyCiBE,cAzCjB;AAAA,SACE;AAAuC,QAAA,IAAI,EAAEN,OAA7C;AAAA,sDAQaI,QARb,EAwCeE,cAxCf,aAAa;AAAb,SACGT,QADH,EACa,GADb,CADF;AAAA;AAAA,kBASeO,QATf,EAyCiBE,cAzCjB;AAAA,4IASeF,QATf,s2BAyCiBE,cAzCjB;AAFF;AAiDD,GAlDM,MAkDA,IAAIJ,SAAS,IAAI,gBAAjB,EAAmC;AACxC,WACE;AAAA;AAAA,OACE;AAAoC,MAAA,IAAI,EAAEF,OAA1C;AAAA,0CAAa;AAAb,OACGH,QADH,EACa,GADb,CADF;AAAA;AAAA,o+4BADF;AAoCD,GArCM,MAqCA,IAAIK,SAAS,IAAI,UAAjB,EAA6B;AAClC,WACE;AACA;AAAA;AAAA,SACE;AAA8B,QAAA,EAAE,EAAC,SAAjC;AAA2C,QAAA,IAAI,EAAEF,OAAjD;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AAuCD,GAxCM,MAwCA,IAAIK,SAAS,IAAI,UAAjB,EAA6B;AAClC,WACE;AACA;AAAA;AAAA,SACE;AAA8B,QAAA,EAAE,EAAC,SAAjC;AAA2C,QAAA,IAAI,EAAEF,OAAjD;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AAmCD,GApCM,MAoCA,IAAIK,SAAS,IAAI,UAAjB,EAA6B;AAClC,WACE;AACA;AAAA;AAAA,SACE;AAA8B,QAAA,EAAE,EAAC,SAAjC;AAA2C,QAAA,IAAI,EAAEF,OAAjD;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AAyCD,GA1CM,MA0CA,IAAIK,SAAS,IAAI,SAAjB,EAA4B;AACjC,WACE;AACA;AAAA;AAAA,SACE;AAA6B,QAAA,EAAE,EAAC,SAAhC;AAA0C,QAAA,IAAI,EAAEF,OAAhD;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AAqCD,GAtCM,MAsCA,IAAIK,SAAS,IAAI,SAAjB,EAA4B;AACjC,WACE;AACA;AAAA;AAAA,SACE;AAA6B,QAAA,EAAE,EAAC,SAAhC;AAA0C,QAAA,IAAI,EAAEF,OAAhD;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AAqCD,GAtCM,MAsCA,IAAIK,SAAS,IAAI,QAAjB,EAA2B;AAChC,WACE;AACA;AAAA;AAAA,SACE;AAA4B,QAAA,IAAI,EAAEF,OAAlC;AAAA,4CAAa;AAAb,SACGH,QADH,CADF;AAAA;AAAA;AAFF;AA6CD,GA9CM,MA8CA;AACL,WACE;AACA;AAAG,QAAA,IAAI,EAAEG,OAAT;AAAA;AAAA,SACE;AAAA,4CAAe;AAAf,SAAyBH,QAAzB,CADF;AAAA;AAAA;AAFF;AAmBD;AACF,CA3oBD;;AA4oBA,eAAeF,QAAf","sourcesContent":["import React, { Children } from \"react\";\nimport * as Util from \"../../../controller/util.js\";\n\nconst btSubmit = props => {\n  var varValue = Util.validaProps(props.value, \"\");\n  var varHref = Util.validaProps(props.href, \"www.oi.com.br\");\n  var varEstilo = Util.validaProps(props.estilo, \"\");\n  var varWidth = Util.validaProps(props.width, \"\");\n  var varWidthMobile = Util.validaProps(props.mobilewidth, \"\");\n\n  if (varEstilo == \"laranja\") {\n    return (\n      // Botão do formulário Meus Documentos.\n      <div>\n        <a className=\"btLinklaranja\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinklaranja {\n            font-family: oiTextRegular, sans-serif;\n            background-color: #f8562c;\n            background-image: linear-gradient(260deg, #fb851c, #f8562c);\n            border-radius: 6px;\n            color: #ffffff;\n            display: block;\n            font-size: 1rem; /*16px*/\n            height: 3.42857143rem;\n            text-align: center;\n            width: 280px;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            padding: 1.2rem;\n            box-sizing: border-box;\n            font-style: normal;\n            transition-duration: 1s;\n          }\n          .btLinklaranja:hover {\n            transition-duration: 1s;\n            color: #f8562c;\n            border: solid 1px #fb851c;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n    //transition: background-image: 2s, transform 2s;\n    //-webkit-transition: width 2s, height 2s, background-color 2s, -webkit-transform 2s;\n    //transition-delay: 0.5s //espera pra\n    //transition: all 0.8s;\n    //-webkit-transition: all 0.8s;\n    //-moz-transition: all 0.8s;\n    //-o-transition: all 0.8s;\n  } else if (varEstilo == \"itemLuzVerde\") {\n    return (\n      // Botão luz.\n      <a className=\"btLuzA\" href={varHref}>\n        <div className=\"btLuz\">\n          <div className=\"btLuz1\"></div>\n          <div className=\"btLuz2\">{varValue}</div>\n          <div className=\"btLuz3\"></div>\n        </div>\n        <style jsx>{`\n          .btLuz{\n            display: inline-flex;\n            flex-wrap: wrap;\n            width: 100%;\n            max-width: 500px;\n            padding :0;\n            margin:0;\n          }\n          .btLuzA{\n            text-decoration: none;\n            color: #10ecf5;\n          }\n          .btLuzA:hover {\n            color: #ffffff;\n            /* .btLuz2 {\n              background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_02_hover.png\");\n            } */\n          }\n          .btLuzA:hover .btLuz1{ \n              background-image: url(\"/static/assetsv5/img/layout_luz/item_luz_01_hover.png\");\n          } \n          .btLuzA:hover .btLuz2{\n            background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_02_hover.png\");\n          }\n          .btLuzA:hover .btLuz3{ \n              background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_03_hover.png\");\n          }\n          .btLuz1{\n            width: 18px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/item_luz_01.png\");\n            padding: 0px;\n            margin: 0;\n          }\n          .btLuz2{\n            min-width: 150px;\n            /*max-width: 468px;*/\n            padding: 10px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/item_luz_02.png\");\n            text-align: center;\n            font-family: sans-serif;\n            display: block;\n            font-size: 1rem; /*16px*/\n            cursor: pointer;\n            outline: 0;\n            font-style: normal;\n            margin: 0;\n          }\n          .btLuz3{\n            width: 15px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/item_luz_03.png\");\n            padding: 0px;\n            margin: 0;\n          }\n        `}</style>\n      </a>\n    );\n  } else if (varEstilo == \"luz\") {\n    return (\n      // Botão luz.\n      <a className=\"btLuzA\" href={varHref}>\n        <div className=\"btLuz\">\n          <div className=\"btLuz1\"></div>\n          <div className=\"btLuz2\">{varValue}</div>\n          <div className=\"btLuz3\"></div>\n        </div>\n        <style jsx>{`\n          .btLuz{\n            display: inline-flex;\n            flex-wrap: wrap;\n            width: 100%;\n            max-width: 500px;\n            padding :0;\n            margin:0;\n          }\n          .btLuzA{\n            text-decoration: none;\n            color: #10ecf5;\n          }\n          .btLuzA:hover {\n            color: #ffffff;\n          }\n          .btLuzA:hover .btLuz1{ \n              background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_01_hover.png\");\n          } \n          .btLuzA:hover .btLuz2{\n            background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_02_hover.png\");\n          }\n          .btLuzA:hover .btLuz3{ \n              background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_03_hover.png\");\n          }\n          .btLuz1{\n            width: 17px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_01.png\");\n            padding: 0px;\n            margin: 0;\n          }\n          .btLuz2{\n            min-width: 180px;\n            /*max-width: 468px;*/\n            padding: 10px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_02.png\");\n            text-align: center;\n            font-family: sans-serif;\n            display: block;\n            font-size: 1rem; /*16px*/\n            cursor: pointer;\n            outline: 0;\n            font-style: normal;\n            margin: 0;\n          }\n          .btLuz3{\n            width: 15px;\n            background-image: url(\"/static/assetsv5/img/layout_luz/but_luz_03.png\");\n            padding: 0px;\n            margin: 0;\n          }\n        `}</style>\n      </a>\n    );\n  }else if (varEstilo == \"cinza\") {\n    return (\n      // Botão cinza site valente.\n      <div>\n        <a className=\"btCinza\" href={varHref}>\n          {varValue}{\" \"}\n        </a>\n        <style jsx>{`\n          .btCinza {\n            padding: 10px;\n            transition: all 0.8s;\n            font-family: oiTextRegular, sans-serif;\n            background-color: #26293c;\n            border-radius: 15px;\n            color: #ffffff;\n            display: block;\n            font-size: 1rem; /*16px*/\n            text-align: center;\n\n            text-decoration: none;\n            border: solid 2px #4a516b;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            box-sizing: border-box;\n            font-style: normal;\n            width: 100%;\n            max-width: 500px;\n          }\n          .btCinza:hover {\n            transition: all 0.8s;\n            -webkit-transition: all 0.8s;\n            -moz-transition: all 0.8s;\n            -o-transition: all 0.8s;\n            /*color: #d82482;*/\n            background-color: #4a516b;\n          }\n        `}</style>\n      </div>\n    );\n  }else if (varEstilo == \"rosa\") {\n    return (\n      // Botão de ENTRAR no minha Oi.\n      <div>\n        <a className=\"btLinkRosa\" href={varHref}>\n          {varValue}{\" \"}\n        </a>\n        <style jsx>{`\n          .btLinkRosa {\n            padding: 10px;\n            transition: all 0.8s;\n            font-family: oiTextRegular, sans-serif;\n            background-color: #d82482;\n            border-radius: 3px;\n            color: #ffffff;\n            display: block;\n            font-size: 1rem; /*16px*/\n            text-align: center;\n\n            text-decoration: none;\n            border: solid 2px #d82482;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            box-sizing: border-box;\n            font-style: normal;\n            width: 100%;\n            max-width: 500px;\n          }\n          .btLinkRosa:hover {\n            transition: all 0.8s;\n            -webkit-transition: all 0.8s;\n            -moz-transition: all 0.8s;\n            -o-transition: all 0.8s;\n            color: #d82482;\n            background-color: #ffffff;\n            border: solid 1px #d82482;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"rosa-invetido\") {\n    return (\n      // Botão usado no minha Oi.\n      <div>\n        <a className=\"btLinkRosaInvetido\" href={varHref}>\n          {varValue}{\" \"}\n        </a>\n        <style jsx>{`\n          .btLinkRosaInvetido {\n            padding: 10px;\n            transition: all 0.8s;\n            font-family: oiTextRegular, sans-serif;\n            background-color: #d82482;\n            border-radius: 3px;\n            display: block;\n            font-size: 1rem; /*16px*/\n            text-align: center;\n            text-decoration: none;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            font-style: normal;\n            width: ${varWidth};\n            max-width: 500px;\n            color: #d82482;\n            background-color: #ffffff;\n            border: solid 1px #d82482;\n          }\n          .btLinkRosaInvetido:hover {\n            transition: all 0.8s;\n            -webkit-transition: all 0.8s;\n            -moz-transition: all 0.8s;\n            -o-transition: all 0.8s;\n            color: #ffffff;\n            border: solid 1px #d82482;\n            background-color: #d82482;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"rosa-invetido-curto\") {\n    return (\n      // Botão usado no minha Oi.\n      <div>\n        <a className=\"btLinkRosaInvetidoCurto\" href={varHref}>\n          {varValue}{\" \"}\n        </a>\n        <style jsx>{`\n          .btLinkRosaInvetidoCurto {\n\t\t  box-sizing: border-box;\n            display: inline-block;\n            position: relative;\n            width: ${varWidth};\n            font-weight: 400;\n            font-style: normal;\n            font-size: 1rem;\n            line-height: normal;\n            letter-spacing: normal;\n            text-align: center;\n            background-color: transparent;\n            color: rgb(216, 36, 130);\n            padding: 20px;\n            margin-top: 25px;\n            margin-bottom: 60px;\n            border-width: 1px;\n            border-style: solid;\n            border-image: initial;\n            border-radius: 4px;\n            text-decoration: none;\n            transition: all 0.3s ease 0s;\n            outline: none;\n            border-color: rgb(216, 36, 130);\n          }\n          .btLinkRosaInvetidoCurto:hover {\n            transition: all 0.8s;\n            -webkit-transition: all 0.8s;\n            -moz-transition: all 0.8s;\n            -o-transition: all 0.8s;\n            color: #ffffff;\n            border: solid 1px #d82482;\n            background-color: #d82482;\n          }\n          @media (max-width: 520px) {\n            .btLinkRosaInvetidoCurto {\n              width: ${varWidthMobile};\n            }\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"laraja-degrade\") {\n    return (\n      <div>\n        <a className=\"btLinkLaranjaDegrade\" href={varHref}>\n          {varValue}{\" \"}\n        </a>\n        <style jsx>{`\n          .btLinkLaranjaDegrade {\n            display: inline-block;\n            position: relative;\n            width: 100%;\n            max-width: 16.875rem;\n            border-radius: 4px;\n            background-color: rgb(255, 215, 0);\n            font-family: \"SimplonBP-Regular\";\n            font-weight: 400;\n            font-style: normal;\n            line-height: normal;\n            letter-spacing: normal;\n            text-align: center;\n            text-decoration: none;\n            transition: all 0.3s ease 0s;\n            outline: currentcolor none medium;\n            background-image: linear-gradient(\n              281deg,\n              rgb(254, 107, 3) -100%,\n              rgb(227, 52, 101)\n            );\n            color: rgb(255, 255, 255);\n            font-size: 1.125rem;\n            box-shadow: rgba(0, 0, 0, 0.2) 10px 13px 20px -3px;\n            border: medium none;\n            padding: 16.5px;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"amarelo1\") {\n    return (\n      // Botão de eu quero no minha Oi.\n      <div>\n        <a className=\"btLinkAmarelo1\" id=\"euquero\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinkAmarelo1 {\n            transition-duration: 1s;\n            font-family: oiTextRegular, sans-serif;\n            font-size: 1rem; /*16px*/\n\n            background-color: #ffd700;\n            border-radius: 0.28571429rem;\n            color: #222;\n            display: block;\n\n            height: 2.2rem;\n            text-align: center;\n            width: 196px;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            padding: 0.6rem 2.5rem;\n            box-sizing: border-box;\n            border: solid 2px #ffd700;\n          }\n          .btLinkAmarelo1:hover {\n            transition-duration: 1s;\n            color: #222;\n            border: solid 2px #ffd700;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"amarelo2\") {\n    return (\n      // Botão de eu quero no minha Oi.\n      <div>\n        <a className=\"btLinkAmarelo2\" id=\"euquero\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinkAmarelo2 {\n            transition-duration: 1s;\n            font-family: oiTextRegular, sans-serif;\n            font-size: 1rem; /*16px*/\n            padding-top: 18px;\n            background-color: #ffd700;\n            border-radius: 3px;\n            color: #222;\n            display: block;\n            height: 3.8rem;\n            text-align: center;\n            width: 100%;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            box-sizing: border-box;\n            border: solid 2px #ffd700;\n          }\n          .btLinkAmarelo2:hover {\n            transition-duration: 1s;\n            color: #222;\n            border: solid 2px #ffd700;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"amarelo3\") {\n    return (\n      // Botão de \"eu quero\" OCC.\n      <div>\n        <a className=\"btLinkAmarelo3\" id=\"euquero\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinkAmarelo3 {\n            transition-duration: 1s;\n            background-color: #ffd700;\n            border-radius: 0.28571429rem;\n            color: #222;\n            display: block;\n            font-size: 1.14285714rem;\n            font-weight: 37.5rem; /*600*/\n\n            height: 3.42857143rem;\n            text-align: center;\n            width: fit-content;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            font-family: \"SimplonBP-Regular\", Arial;\n            outline: 0;\n            margin: 0;\n            /*margin-top: 1.28571429rem;*/\n            padding: 0.85714286rem 20px;\n            box-sizing: border-box;\n            font-style: normal;\n            border: solid 2px #ffd700;\n          }\n          .btLinkAmarelo3:hover {\n            transition-duration: 1s;\n            color: #222;\n            border: solid 2px #ffd700;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"Purple1\") {\n    return (\n      // Botão do Minha Oi na home do site SEO.\n      <div>\n        <a className=\"btLinkPurple1\" id=\"euquero\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinkPurple1 {\n            font-family: oiTextRegular, sans-serif;\n            font-size: 1rem; /*16px*/\n            background-color: #8f25e5;\n            border-radius: 3px;\n            color: #ffffff;\n            display: block;\n            height: 3.8rem;\n            text-align: center;\n            width: 143px;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            padding: 1.2rem;\n            box-sizing: border-box;\n            font-style: normal;\n            transition-duration: 1s;\n          }\n          .btLinkPurple1:hover {\n            transition-duration: 1s;\n            color: #8f25e5;\n            border: solid 1px #8f25e5;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"Purple2\") {\n    return (\n      // Botão do Minha Oi na home do site SEO.\n      <div>\n        <a className=\"btLinkPurple1\" id=\"euquero\" href={varHref}>\n          {varValue}\n        </a>\n        <style jsx>{`\n          .btLinkPurple1 {\n            font-family: oiTextRegular, sans-serif;\n            background-color: #8f25e5;\n            border-radius: 3px;\n            color: #ffffff;\n            display: block;\n            font-size: 1rem; /*16px*/\n            height: 3.2rem;\n            text-align: center;\n            width: 169px;\n            text-decoration: none;\n            border-bottom: solid 1px #dbdbdb;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            padding: 1.2rem;\n            box-sizing: border-box;\n            font-style: normal;\n            transition-duration: 1s;\n          }\n          .btLinkPurple1:hover {\n            transition-duration: 1s;\n            color: #8f25e5;\n            border: solid 1px #8f25e5;\n            background-color: #ffffff;\n            background-image: none;\n          }\n        `}</style>\n      </div>\n    );\n  } else if (varEstilo == \"branco\") {\n    return (\n      // Botão do formulário Meus Documentos.\n      <div>\n        <a className=\"btLinkBranco\" href={varHref}>\n          {varValue}\n        </a>\n        {/* margin-top: 20px;\n              padding: 0;\n              margin: 0px;\n              margin-top : 20px;\n              padding: 10px;\n              cursor: pointer;\n              border-radius: 8px; */}\n        <style jsx>{`\n          .btLinkBranco {\n            font-family: oiTextRegular, sans-serif;\n            background-color: #ffffff;\n            border-radius: 8px;\n            color: #222222;\n            display: block;\n            font-size: 1rem; /*16px*/\n            height: 3.42857143rem;\n            text-align: center;\n            width: 300px;\n            text-decoration: none;\n            border: solid 1px #dbdbdb;\n            cursor: pointer;\n            outline: 0;\n            margin: 0;\n            padding: 1.2rem;\n            box-sizing: border-box;\n            font-style: normal;\n            transition: 0.5s;\n            -webkit-box-shadow: 2px 2px 20px rgba(1, 1, 1, 0.17);\n            -moz-box-shadow: 2px 2px 20px rgba(1, 1, 1, 0.17);\n            box-shadow: 2px 2px 20px rgba(1, 1, 1, 0.17);\n          }\n          .btLinkBranco:hover {\n            -webkit-box-shadow: 1px 1px 10px rgba(1, 1, 1, 0.47);\n            -moz-box-shadow: 1px 1px 10px rgba(1, 1, 1, 0.47);\n            box-shadow: 1px 1px 10px rgba(1, 1, 1, 0.47);\n          }\n        `}</style>\n      </div>\n    );\n  } else {\n    return (\n      //Sem padrão\n      <a href={varHref}>\n        <div className=\"btLink\">{varValue}</div>\n        <style jsx>{`\n          .btLink {\n            width: 100%;\n            padding-top: 20px;\n            padding-bottom: 20px;\n            color: #000000;\n            cursor: pointer;\n            border-radius: 6px;\n            text-align: center;\n            border: solid 1px #dbdbdb;\n            background-color: #ffffff;\n          }\n        `}</style>\n      </a>\n    );\n  }\n};\nexport default btSubmit;\n"]},"metadata":{},"sourceType":"module"}