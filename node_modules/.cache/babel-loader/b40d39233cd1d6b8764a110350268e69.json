{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport Img from '../../../atoms/atImg/index.js';\nimport Div from '../../../atoms/atDiv/index.js';\nimport Layout from '../../../moleculas/layout';\nimport MoHead from '../../../moleculas/moHead';\nimport DivCodigo from '../../../atoms/atDivCodigo'; //import DivNaveg from '../../../atoms/atDivNaveg'\n\nimport * as Util from '../../../../controller/util.js';\n\nvar codigoJava = function codigoJava(props) {\n  console.log('╔═══════════════════════════╗');\n  console.log('║ Tutorial - Python - NumPy ║');\n  console.log('╚═══════════════════════════╝');\n  var regiao = Util.validaProps(props.regiao, \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n  return React.createElement(\"div\", {\n    className: \"jsx-2716360461\"\n  }, React.createElement(MoHead, {\n    modo: modo,\n    title: \"NumPy\",\n    description: \"O que \\xE9 NumPy\",\n    canonical: \"/tutorial/python/numpy/\",\n    keywords: \"Python, Tutorial, linguagem, programa\\xE7\\xE3o, codigo, NumPy, biblioteca, pacote\"\n  }), React.createElement(Layout, {\n    regiao: regiao,\n    modo: modo,\n    titulo: \"Tutoriais\",\n    categoria: \"Python\"\n  }, React.createElement(Div, {\n    display: \"responcivo\"\n  }, React.createElement(\"div\", {\n    className: \"jsx-2716360461\"\n  }, React.createElement(\"h1\", {\n    className: \"jsx-2716360461\"\n  }, \"NumPy\"), React.createElement(\"h3\", {\n    className: \"jsx-2716360461\"\n  }, \"O que \\xE9 NumPy?\"), React.createElement(\"p\", {\n    className: \"jsx-2716360461\"\n  }, \"\\xC9 um Biblioteca para trabalhar com matrizes e vetores. NumPy \\xE9 um pacote para a linguagem Python que suporta arrays e matrizes multidimensionais, possuindo uma larga cole\\xE7\\xE3o de fun\\xE7\\xF5es matem\\xE1ticas para trabalhar com estas estruturas.\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  })), React.createElement(\"h3\", {\n    className: \"jsx-2716360461\"\n  }, \"Limita\\xE7\\xE3o do NumPy\"), React.createElement(\"p\", {\n    className: \"jsx-2716360461\"\n  }, \"As variaveis precisam ter dados de mesmo tipo. E por isso a necessidade de utilizar o Pandas.\"), React.createElement(DivCodigo, {\n    titulo: \"Exemplo de c\\xF3digo com Numpy\"\n  }, \"## Python comum\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"L = range(1000) \", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"%timeit [i** 2 for i in L] ## Mostrar o tempo que demorou para processar\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"# Com Numpy\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"import numpy as np\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"a = np.arange(1000)\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"%timeit a** 2 ## Mostrar o tempo que demorou para processar\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  })), React.createElement(DivCodigo, {\n    titulo: \"Calculos com arrays\"\n  }, \"# Criar arrys com Numpy\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"dados01 = np.array([1,2,3,4,5,6,7,8,9])\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"dados02 = np.array([7,4,3,2,4,5,6,7,8])\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"# Somar 2 arrays\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"soma = dados01 + dados02\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"print(soma)\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"# Multiplicar 2 arrays\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"multiplicar = dados01 + dados02\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"print(multiplicar)\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"# M\\xE9dias\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"media = dados01.mean()\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"print(media)\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"# desvio padr\\xE3o\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"DesvioPadr\\xE3o = dados01.std()\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"print(DesvioPadr\\xE3o)\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"#Valor m\\xE1ximo\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"dados01.max()\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"#Valor minimo\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }), \"dados01.mini()\", React.createElement(\"br\", {\n    className: \"jsx-2716360461\"\n  }))), React.createElement(\"div\", {\n    className: \"jsx-2716360461\"\n  }, React.createElement(Img, {\n    src: \"/static/assetsv5/img/codigo/logonumpy.png\",\n    width: \"323px\",\n    height: \"436px\",\n    alt: \"Logo NumPy\",\n    title: \"Logo NumPy\",\n    class: \"ClassLogoNumPy\",\n    modo: modo\n  })))), React.createElement(_JSXStyle, {\n    id: \"2716360461\"\n  }, \".h1.jsx-2716360461{color :#000000;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL29pNDAyODI1L0RvY3VtZW50b3MvUHJvamV0b3Mvc2l0ZV9kb192YWxlbnRlL2NvbXBvbmVudHMvdGVtcGxhdGVzL2NvZGlnby9weXRob24vbnVtcHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkZrQixBQUcwQixlQUNqQiIsImZpbGUiOiIvaG9tZS9vaTQwMjgyNS9Eb2N1bWVudG9zL1Byb2pldG9zL3NpdGVfZG9fdmFsZW50ZS9jb21wb25lbnRzL3RlbXBsYXRlcy9jb2RpZ28vcHl0aG9uL251bXB5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEltZyBmcm9tICcuLi8uLi8uLi9hdG9tcy9hdEltZy9pbmRleC5qcydcbmltcG9ydCBEaXYgZnJvbSAnLi4vLi4vLi4vYXRvbXMvYXREaXYvaW5kZXguanMnXG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uLy4uLy4uL21vbGVjdWxhcy9sYXlvdXQnXG5pbXBvcnQgTW9IZWFkIGZyb20gJy4uLy4uLy4uL21vbGVjdWxhcy9tb0hlYWQnXG5pbXBvcnQgRGl2Q29kaWdvIGZyb20gJy4uLy4uLy4uL2F0b21zL2F0RGl2Q29kaWdvJ1xuLy9pbXBvcnQgRGl2TmF2ZWcgZnJvbSAnLi4vLi4vLi4vYXRvbXMvYXREaXZOYXZlZydcbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vLi4vLi4vLi4vY29udHJvbGxlci91dGlsLmpzJztcblxuY29uc3QgY29kaWdvSmF2YSA9IGZ1bmN0aW9uIChwcm9wcykge1xuXG4gIGNvbnNvbGUubG9nKCfilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZcnKTtcbiAgY29uc29sZS5sb2coJ+KVkSBUdXRvcmlhbCAtIFB5dGhvbiAtIE51bVB5IOKVkScpO1xuICBjb25zb2xlLmxvZygn4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdJyk7XG5cbiAgdmFyIHJlZ2lhbyA9IFV0aWwudmFsaWRhUHJvcHMocHJvcHMucmVnaWFvICwgXCJSSlwiKTtcbiAgdmFyIG1vZG8gPSBVdGlsLnZhbGlkYVByb3BzKHByb3BzLm1vZG8sIFwiaHRtbFwiKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TW9IZWFkIFxuICAgICAgICBtb2RvPXttb2RvfSBcbiAgICAgICAgdGl0bGU9XCJOdW1QeVwiIFxuICAgICAgICBkZXNjcmlwdGlvbj1cIk8gcXVlIMOpIE51bVB5XCIgXG4gICAgICAgIGNhbm9uaWNhbD1cIi90dXRvcmlhbC9weXRob24vbnVtcHkvXCJcbiAgICAgICAga2V5d29yZHM9XCJQeXRob24sIFR1dG9yaWFsLCBsaW5ndWFnZW0sIHByb2dyYW1hw6fDo28sIGNvZGlnbywgTnVtUHksIGJpYmxpb3RlY2EsIHBhY290ZVwiXG4gICAgICAvPlxuICAgICAgPExheW91dCByZWdpYW89e3JlZ2lhb30gbW9kbz17bW9kb30gdGl0dWxvPVwiVHV0b3JpYWlzXCIgY2F0ZWdvcmlhPVwiUHl0aG9uXCI+XG4gICAgICAgIDxEaXYgZGlzcGxheT1cInJlc3BvbmNpdm9cIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPk51bVB5PC9oMT5cbiAgICAgICAgICAgIDxoMz5PIHF1ZSDDqSBOdW1QeT88L2gzPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIMOJIHVtIEJpYmxpb3RlY2EgcGFyYSB0cmFiYWxoYXIgY29tIG1hdHJpemVzIGUgdmV0b3Jlcy5cbiAgICAgICAgICAgICAgTnVtUHkgw6kgdW0gcGFjb3RlIHBhcmEgYSBsaW5ndWFnZW0gUHl0aG9uIHF1ZSBzdXBvcnRhIGFycmF5cyBlIG1hdHJpemVzIG11bHRpZGltZW5zaW9uYWlzLCBwb3NzdWluZG8gdW1hIGxhcmdhIGNvbGXDp8OjbyBkZSBmdW7Dp8O1ZXMgbWF0ZW3DoXRpY2FzIHBhcmEgdHJhYmFsaGFyIGNvbSBlc3RhcyBlc3RydXR1cmFzLjxici8+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8aDM+TGltaXRhw6fDo28gZG8gTnVtUHk8L2gzPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIEFzIHZhcmlhdmVpcyBwcmVjaXNhbSB0ZXIgZGFkb3MgZGUgbWVzbW8gdGlwby5cbiAgICAgICAgICAgICAgRSBwb3IgaXNzbyBhIG5lY2Vzc2lkYWRlIGRlIHV0aWxpemFyIG8gUGFuZGFzLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPERpdkNvZGlnbyB0aXR1bG89XCJFeGVtcGxvIGRlIGPDs2RpZ28gY29tIE51bXB5XCI+XG4gICAgICAgICAgICAgICMjIFB5dGhvbiBjb211bTxici8+XG4gICAgICAgICAgICAgIEwgPSByYW5nZSgxMDAwKSA8YnIvPlxuICAgICAgICAgICAgICAldGltZWl0IFtpKiogMiBmb3IgaSBpbiBMXSAjIyBNb3N0cmFyIG8gdGVtcG8gcXVlIGRlbW9yb3UgcGFyYSBwcm9jZXNzYXI8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAjIENvbSBOdW1weTxici8+XG4gICAgICAgICAgICAgIGltcG9ydCBudW1weSBhcyBucDxici8+XG4gICAgICAgICAgICAgIGEgPSBucC5hcmFuZ2UoMTAwMCk8YnIvPlxuICAgICAgICAgICAgICAldGltZWl0IGEqKiAyICMjIE1vc3RyYXIgbyB0ZW1wbyBxdWUgZGVtb3JvdSBwYXJhIHByb2Nlc3Nhcjxici8+XG4gICAgICAgICAgICA8L0RpdkNvZGlnbz5cblxuICAgICAgICAgICAgPERpdkNvZGlnbyB0aXR1bG89XCJDYWxjdWxvcyBjb20gYXJyYXlzXCI+XG4gICAgICAgICAgICAgICMgQ3JpYXIgYXJyeXMgY29tIE51bXB5PGJyLz5cbiAgICAgICAgICAgICAgZGFkb3MwMSA9IG5wLmFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pPGJyLz5cbiAgICAgICAgICAgICAgZGFkb3MwMiA9IG5wLmFycmF5KFs3LDQsMywyLDQsNSw2LDcsOF0pPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgIyBTb21hciAyIGFycmF5czxici8+XG4gICAgICAgICAgICAgIHNvbWEgPSBkYWRvczAxICsgZGFkb3MwMjxici8+XG4gICAgICAgICAgICAgIHByaW50KHNvbWEpPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgIyBNdWx0aXBsaWNhciAyIGFycmF5czxici8+XG4gICAgICAgICAgICAgIG11bHRpcGxpY2FyID0gZGFkb3MwMSArIGRhZG9zMDI8YnIvPlxuICAgICAgICAgICAgICBwcmludChtdWx0aXBsaWNhcik8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAjIE3DqWRpYXM8YnIvPlxuICAgICAgICAgICAgICBtZWRpYSA9IGRhZG9zMDEubWVhbigpPGJyLz5cbiAgICAgICAgICAgICAgcHJpbnQobWVkaWEpPGJyLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgIyBkZXN2aW8gcGFkcsOjbzxici8+XG4gICAgICAgICAgICAgIERlc3Zpb1BhZHLDo28gPSBkYWRvczAxLnN0ZCgpPGJyLz5cbiAgICAgICAgICAgICAgcHJpbnQoRGVzdmlvUGFkcsOjbyk8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAjVmFsb3IgbcOheGltbzxici8+XG4gICAgICAgICAgICAgIGRhZG9zMDEubWF4KCk8YnIvPlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAjVmFsb3IgbWluaW1vPGJyLz5cbiAgICAgICAgICAgICAgZGFkb3MwMS5taW5pKCk8YnIvPlxuICAgICAgICAgICAgPC9EaXZDb2RpZ28+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxJbWcgXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvc3RhdGljL2Fzc2V0c3Y1L2ltZy9jb2RpZ28vbG9nb251bXB5LnBuZ1wiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjMyM3B4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjQzNnB4XCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkxvZ28gTnVtUHlcIlxuICAgICAgICAgICAgICAgICAgdGl0bGU9XCJMb2dvIE51bVB5XCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiQ2xhc3NMb2dvTnVtUHlcIlxuICAgICAgICAgICAgICAgICAgbW9kbz17bW9kb30+XG4gICAgICAgICAgICA8L0ltZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9EaXY+XG4gICAgICA8L0xheW91dD5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmgxe1xuICAgICAgICAgIGNvbG9yIDogIzAwMDAwMDtcbiAgICAgICAgfVxuICAgIGB9PC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb2RpZ29KYXZhXG4iXX0= */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/codigo/python/numpy.js */\"));\n};\n\nexport default codigoJava;","map":{"version":3,"sources":["/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/codigo/python/numpy.js"],"names":["React","Img","Div","Layout","MoHead","DivCodigo","Util","codigoJava","props","console","log","regiao","validaProps","modo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Img from '../../../atoms/atImg/index.js'\nimport Div from '../../../atoms/atDiv/index.js'\nimport Layout from '../../../moleculas/layout'\nimport MoHead from '../../../moleculas/moHead'\nimport DivCodigo from '../../../atoms/atDivCodigo'\n//import DivNaveg from '../../../atoms/atDivNaveg'\nimport * as Util from '../../../../controller/util.js';\n\nconst codigoJava = function (props) {\n\n  console.log('╔═══════════════════════════╗');\n  console.log('║ Tutorial - Python - NumPy ║');\n  console.log('╚═══════════════════════════╝');\n\n  var regiao = Util.validaProps(props.regiao , \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n\n  return (\n    <div>\n      <MoHead \n        modo={modo} \n        title=\"NumPy\" \n        description=\"O que é NumPy\" \n        canonical=\"/tutorial/python/numpy/\"\n        keywords=\"Python, Tutorial, linguagem, programação, codigo, NumPy, biblioteca, pacote\"\n      />\n      <Layout regiao={regiao} modo={modo} titulo=\"Tutoriais\" categoria=\"Python\">\n        <Div display=\"responcivo\">\n          <div>\n            <h1>NumPy</h1>\n            <h3>O que é NumPy?</h3>\n            <p>\n              É um Biblioteca para trabalhar com matrizes e vetores.\n              NumPy é um pacote para a linguagem Python que suporta arrays e matrizes multidimensionais, possuindo uma larga coleção de funções matemáticas para trabalhar com estas estruturas.<br/>\n            </p>\n            <h3>Limitação do NumPy</h3>\n            <p>\n              As variaveis precisam ter dados de mesmo tipo.\n              E por isso a necessidade de utilizar o Pandas.\n            </p>\n            <DivCodigo titulo=\"Exemplo de código com Numpy\">\n              ## Python comum<br/>\n              L = range(1000) <br/>\n              %timeit [i** 2 for i in L] ## Mostrar o tempo que demorou para processar<br/>\n              <br/>\n              # Com Numpy<br/>\n              import numpy as np<br/>\n              a = np.arange(1000)<br/>\n              %timeit a** 2 ## Mostrar o tempo que demorou para processar<br/>\n            </DivCodigo>\n\n            <DivCodigo titulo=\"Calculos com arrays\">\n              # Criar arrys com Numpy<br/>\n              dados01 = np.array([1,2,3,4,5,6,7,8,9])<br/>\n              dados02 = np.array([7,4,3,2,4,5,6,7,8])<br/>\n              <br/>\n              # Somar 2 arrays<br/>\n              soma = dados01 + dados02<br/>\n              print(soma)<br/>\n              <br/>\n              # Multiplicar 2 arrays<br/>\n              multiplicar = dados01 + dados02<br/>\n              print(multiplicar)<br/>\n              <br/>\n              # Médias<br/>\n              media = dados01.mean()<br/>\n              print(media)<br/>\n              <br/>\n              # desvio padrão<br/>\n              DesvioPadrão = dados01.std()<br/>\n              print(DesvioPadrão)<br/>\n              <br/>\n              #Valor máximo<br/>\n              dados01.max()<br/>\n              <br/>\n              #Valor minimo<br/>\n              dados01.mini()<br/>\n            </DivCodigo>\n          </div>\n          <div>\n            <Img \n                  src=\"/static/assetsv5/img/codigo/logonumpy.png\"\n                  width=\"323px\"\n                  height=\"436px\"\n                  alt=\"Logo NumPy\"\n                  title=\"Logo NumPy\"\n                  class=\"ClassLogoNumPy\"\n                  modo={modo}>\n            </Img>\n          </div>\n        </Div>\n      </Layout>\n      <style jsx>{`\n        .h1{\n          color : #000000;\n        }\n    `}</style>\n    </div>\n  )\n}\n\nexport default codigoJava\n"]},"metadata":{},"sourceType":"module"}