{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport * as Util from '../../../controller/util.js';\n\nvar Line = function Line(props) {\n  var css = Util.validaProps(props.css, '');\n\n  if (css == \"linhaDivisao\") {\n    return React.createElement(\"div\", {\n      className: \"jsx-3042441548\" + \" \" + \"linhaDivisao\"\n    }, React.createElement(_JSXStyle, {\n      id: \"3042441548\"\n    }, [\".linhaDivisao.jsx-3042441548{display:block;width:100%;height:1px;position:static;bottom:unset;height:1px;background-color:#d7d7d7;margin:0;padding:0;direction:horizontal;}\"]));\n  } else {\n    var position = Util.validaProps(props.position, 'relative');\n    var display = Util.validaProps(props.display, 'block');\n    var width = Util.validaProps(props.width, '100%');\n    var height = Util.validaProps(props.height, '1px');\n    var color = Util.validaProps(props.color, '#d7d7d7');\n    var margin = Util.validaProps(props.margin, [15, 0]);\n    var padding = Util.validaProps(props.padding, [0]);\n    var top = Util.validaProps(props.top, 'initial');\n    var bottom = Util.validaProps(props.bottom, 'initial');\n    var left = Util.validaProps(props.left, 'initial');\n    var right = Util.validaProps(props.right, 'initial');\n    var shrink = Util.validaProps(props.shrink, 0);\n    var alignSelf = Util.validaProps(props.alignSelf, 'initial');\n    return React.createElement(\"div\", {\n      className: _JSXStyle.dynamic([[\"3177363843\", [display, width, height, color, margin, padding, position, top, bottom, left, right, shrink, alignSelf]]]) + \" \" + \"Line\"\n    }, React.createElement(_JSXStyle, {\n      id: \"3177363843\",\n      dynamic: [display, width, height, color, margin, padding, position, top, bottom, left, right, shrink, alignSelf]\n    }, [\".Line.__jsx-style-dynamic-selector{display:\".concat(display, \";width:\").concat(width, \": height:\").concat(height, \";color:\").concat(color, \";margin:\").concat(margin, \";padding:\").concat(padding, \";position:\").concat(position, \";top:\").concat(top, \";bottom:\").concat(bottom, \", left:\").concat(left, \", right:\").concat(right, \", shrink:\").concat(shrink, \", alignSelf:\").concat(alignSelf, \";}\")]));\n  }\n};\n\nexport default Line;\nexport { Line };","map":null,"metadata":{},"sourceType":"module"}