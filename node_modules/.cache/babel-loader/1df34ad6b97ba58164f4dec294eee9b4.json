{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport Layout from '../../moleculas/layout';\nimport MoHead from '../../moleculas/moHead';\nimport * as Util from '../../../controller/util.js';\nimport Div from '../../atoms/atDiv';\n\nvar conversordeunidade = function conversordeunidade(props) {\n  console.log('╔═════════════════════════════════════╗');\n  console.log('║          conversordeunidade         ║');\n  console.log('╚═════════════════════════════════════╝');\n  var regiao = Util.validaProps(props.regiao, \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n\n  function calcular() {\n    var numero = document.getElementById('impMedidaPre').value;\n    var medidaInit = document.getElementById('selMedidaPre').value;\n    var medidaFinal = document.getElementById('selMedidaPos').value;\n    document.getElementById('impMedidaPos').value = numero;\n    alert('Convertendo ' + numero + medidaInit + ' em ' + medidaFinal);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"jsx-691788713\"\n  }, React.createElement(MoHead, {\n    modo: modo,\n    title: \"onversor de Unidade\",\n    description: \"Utilitario - Conversor de Unidade\",\n    canonical: \"/utilitarios/conversordeunidade/\"\n  }), React.createElement(Layout, {\n    regiao: regiao,\n    modo: modo\n  }, React.createElement(Div, {\n    display: \"responsivo\"\n  }, React.createElement(\"div\", {\n    className: \"jsx-691788713\"\n  }, React.createElement(\"h1\", {\n    className: \"jsx-691788713\"\n  }, \"Conversor de Unidade\"), React.createElement(\"p\", {\n    className: \"jsx-691788713\"\n  }, \"Esta p\\xE1gina est\\xE1 em desenvolvimento. Volte em breve.\"), React.createElement(\"select\", {\n    id: \"selMedidaPre\",\n    name: \"selMedidaPre\",\n    onChange: function onChange() {\n      calcular();\n    },\n    className: \"jsx-691788713\"\n  }, React.createElement(\"option\", {\n    value: \"metros\",\n    className: \"jsx-691788713\"\n  }, \"metros\"), React.createElement(\"option\", {\n    value: \"Quil\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Quil\\xF4metros\"), React.createElement(\"option\", {\n    value: \"centimetros\",\n    className: \"jsx-691788713\"\n  }, \"centimetros\"), React.createElement(\"option\", {\n    value: \"Mil\\xEDmetros\",\n    className: \"jsx-691788713\"\n  }, \"Mil\\xEDmetros\"), React.createElement(\"option\", {\n    value: \"Micr\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Micr\\xF4metros\"), React.createElement(\"option\", {\n    value: \"Nan\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Nan\\xF4metros\"), React.createElement(\"option\", {\n    value: \"Milhas\",\n    className: \"jsx-691788713\"\n  }, \"Milhas\"), React.createElement(\"option\", {\n    value: \"Jardas\",\n    className: \"jsx-691788713\"\n  }, \"Jardas\"), React.createElement(\"option\", {\n    value: \"p\\xE9s\",\n    className: \"jsx-691788713\"\n  }, \"p\\xE9s\"), React.createElement(\"option\", {\n    value: \"polegada\",\n    className: \"jsx-691788713\"\n  }, \"polegada\"), React.createElement(\"option\", {\n    value: \"milha nautica\",\n    className: \"jsx-691788713\"\n  }, \"milha nautica\")), React.createElement(\"input\", {\n    type: \"number\",\n    id: \"impMedidaPre\",\n    name: \"impMedidaPre\",\n    required: true,\n    autofocus: true,\n    maxlength: \"20\",\n    className: \"jsx-691788713\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), React.createElement(\"select\", {\n    id: \"selMedidaPos\",\n    name: \"selMedidaPos\",\n    onChange: function onChange() {\n      calcular();\n    },\n    className: \"jsx-691788713\"\n  }, React.createElement(\"option\", {\n    value: \"metros\",\n    className: \"jsx-691788713\"\n  }, \"metros\"), React.createElement(\"option\", {\n    value: \"Quil\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Quil\\xF4metros\"), React.createElement(\"option\", {\n    value: \"centimetros\",\n    className: \"jsx-691788713\"\n  }, \"centimetros\"), React.createElement(\"option\", {\n    value: \"Mil\\xEDmetros\",\n    className: \"jsx-691788713\"\n  }, \"Mil\\xEDmetros\"), React.createElement(\"option\", {\n    value: \"Micr\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Micr\\xF4metros\"), React.createElement(\"option\", {\n    value: \"Nan\\xF4metros\",\n    className: \"jsx-691788713\"\n  }, \"Nan\\xF4metros\"), React.createElement(\"option\", {\n    value: \"Milhas\",\n    className: \"jsx-691788713\"\n  }, \"Milhas\"), React.createElement(\"option\", {\n    value: \"Jardas\",\n    className: \"jsx-691788713\"\n  }, \"Jardas\"), React.createElement(\"option\", {\n    value: \"p\\xE9s\",\n    className: \"jsx-691788713\"\n  }, \"p\\xE9s\"), React.createElement(\"option\", {\n    value: \"polegada\",\n    className: \"jsx-691788713\"\n  }, \"polegada\"), React.createElement(\"option\", {\n    value: \"milha nautica\",\n    className: \"jsx-691788713\"\n  }, \"milha nautica\")), React.createElement(\"input\", {\n    type: \"number\",\n    id: \"impMedidaPos\",\n    name: \"impMedidaPos\",\n    maxlength: \"20\",\n    className: \"jsx-691788713\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  })), React.createElement(\"div\", {\n    className: \"jsx-691788713\"\n  }, \"Unidade de Comprimento\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 0,001 Quil\\xF4metros (divida o valor de comprimento por 1000)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 100 centimetros (multiplique o valor de comprimento por 100)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 1000 Mil\\xEDmetros (multiplique o valor de comprimento por 1000)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 1e+6 Micr\\xF4metros (multiplique o valor de comprimento por 1e+6)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 1e+9 Nan\\xF4metros (Multiplique o valor de comprimento por 1e+9)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 0,000621371 Milhas (divida o valor de comprimento por 1609)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 1,09361 Jardas (multiplique o valor de comprimento por 1,094)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 3,28084 p\\xE9s (multiplique o valor de comprimento por 3,281)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 39,37008 polegada (multiplique o valor de comprimento por 39,37)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  }), \"1 metro = 0,000539957 milha nautica (divida o valor de comprimento por 1852)\", React.createElement(\"br\", {\n    className: \"jsx-691788713\"\n  })))), React.createElement(_JSXStyle, {\n    id: \"691788713\"\n  }, \".Godzilla.jsx-691788713{position:absolute;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/utilitarios/conversordeunidade.js */\"));\n}; //Unidade de Comprimento\n//1 metro = 0,001 Quilômetros (divida o valor de comprimento por 1000)\n//1 metro = 100 centimetros (multiplique o valor de comprimento por 100)\n//1 metro = 1000 Milímetros (multiplique o valor de comprimento por 1000)\n//1 metro = 1e+6 Micrômetros (multiplique o valor de comprimento por 1e+6)\n//1 metro = 1e+9 Nanômetros (Multiplique o valor de comprimento por 1e+9)\n//1 metro = 0,000621371 Milhas (divida o valor de comprimento por 1609)\n//1 metro = 1,09361 Jardas (multiplique o valor de comprimento por 1,094)\n//1 metro = 3,28084 pés (multiplique o valor de comprimento por 3,281)\n//1 metro = 39,37008 polegada (multiplique o valor de comprimento por 39,37)\n//1 metro = 0,000539957 milha nautica (divida o valor de comprimento por 1852)\n// <div className=\"Godzilla\" id=\"position\">\n// <a href=\"#meuLink\" onclick=\"myFunction();\">\n//<img onload=\"mouse();\" alt=\"Fundo\" src=\"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/BBVShEa.img?h=416&amp;w=799&amp;m=6&amp;q=60&amp;u=t&amp;o=f&amp;l=f&amp;x=871&amp;y=654\" width=\"100%\" height=\"100%\" title=\"Cenário de cidades\"></img>\n\n\nexport default conversordeunidade;","map":{"version":3,"sources":["/home/oi402825/Documentos/Projetos/site_do_valente/components/templates/utilitarios/conversordeunidade.js"],"names":["React","Layout","MoHead","Util","Div","conversordeunidade","props","console","log","regiao","validaProps","modo","calcular","numero","document","getElementById","value","medidaInit","medidaFinal","alert"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Layout from '../../moleculas/layout'\nimport MoHead from '../../moleculas/moHead'\nimport * as Util from '../../../controller/util.js';\nimport Div from '../../atoms/atDiv'\nconst conversordeunidade = function (props) {\n\n  console.log('╔═════════════════════════════════════╗');\n  console.log('║          conversordeunidade         ║');\n  console.log('╚═════════════════════════════════════╝');\n\n  var regiao = Util.validaProps(props.regiao , \"RJ\");\n  var modo = Util.validaProps(props.modo, \"html\");\n\n  function calcular(){\n    var numero = document.getElementById('impMedidaPre').value;\n    var medidaInit = document.getElementById('selMedidaPre').value;\n    var medidaFinal = document.getElementById('selMedidaPos').value;\n    document.getElementById('impMedidaPos').value = numero;\n    \n    alert('Convertendo ' + numero + medidaInit + ' em ' + medidaFinal);\n  }\n\n  return (\n    <div>\n      <MoHead modo={modo} title=\"onversor de Unidade\" description=\"Utilitario - Conversor de Unidade\" canonical=\"/utilitarios/conversordeunidade/\"/>\n\n      <Layout regiao={regiao} modo={modo}>\n      <Div display=\"responsivo\">\n          <div>\n            \n            <h1>Conversor de Unidade</h1>\n            <p>Esta página está em desenvolvimento. Volte em breve.</p>\n           \n            <select id=\"selMedidaPre\" name=\"selMedidaPre\" onChange={() => {calcular()}}>\n              <option value=\"metros\">metros</option>\n              <option value=\"Quilômetros\">Quilômetros</option>\n              <option value=\"centimetros\">centimetros</option>\n              <option value=\"Milímetros\">Milímetros</option>\n              <option value=\"Micrômetros\">Micrômetros</option>\n              <option value=\"Nanômetros\">Nanômetros</option>\n              <option value=\"Milhas\">Milhas</option>\n              <option value=\"Jardas\">Jardas</option>\n              <option value=\"pés\">pés</option>\n              <option value=\"polegada\">polegada</option>\n              <option value=\"milha nautica\">milha nautica</option>\n            </select>\n            <input type=\"number\" id=\"impMedidaPre\" name=\"impMedidaPre\" required autofocus maxlength=\"20\"/><br/>\n            <br/>\n            <select id=\"selMedidaPos\" name=\"selMedidaPos\" onChange={() => {calcular()}}>\n              <option value=\"metros\">metros</option>\n              <option value=\"Quilômetros\">Quilômetros</option>\n              <option value=\"centimetros\">centimetros</option>\n              <option value=\"Milímetros\">Milímetros</option>\n              <option value=\"Micrômetros\">Micrômetros</option>\n              <option value=\"Nanômetros\">Nanômetros</option>\n              <option value=\"Milhas\">Milhas</option>\n              <option value=\"Jardas\">Jardas</option>\n              <option value=\"pés\">pés</option>\n              <option value=\"polegada\">polegada</option>\n              <option value=\"milha nautica\">milha nautica</option>\n            </select>\n            <input type=\"number\" id=\"impMedidaPos\" name=\"impMedidaPos\" maxlength=\"20\"/><br/>\n            <br/>\n\n          </div>\n\n          <div>\n          Unidade de Comprimento<br/>\n          1 metro = 0,001 Quilômetros (divida o valor de comprimento por 1000)<br/>\n          1 metro = 100 centimetros (multiplique o valor de comprimento por 100)<br/>\n          1 metro = 1000 Milímetros (multiplique o valor de comprimento por 1000)<br/>\n          1 metro = 1e+6 Micrômetros (multiplique o valor de comprimento por 1e+6)<br/>\n          1 metro = 1e+9 Nanômetros (Multiplique o valor de comprimento por 1e+9)<br/>\n          1 metro = 0,000621371 Milhas (divida o valor de comprimento por 1609)<br/>\n          1 metro = 1,09361 Jardas (multiplique o valor de comprimento por 1,094)<br/>\n          1 metro = 3,28084 pés (multiplique o valor de comprimento por 3,281)<br/>\n          1 metro = 39,37008 polegada (multiplique o valor de comprimento por 39,37)<br/>\n          1 metro = 0,000539957 milha nautica (divida o valor de comprimento por 1852)<br/> \n          </div>\n        </Div>  \n      </Layout>\n      <style jsx>{`\n        .Godzilla {\n          position: absolute;\n        }\n      `}</style>\n\n    </div>\n  )\n}\n\n//Unidade de Comprimento\n//1 metro = 0,001 Quilômetros (divida o valor de comprimento por 1000)\n//1 metro = 100 centimetros (multiplique o valor de comprimento por 100)\n//1 metro = 1000 Milímetros (multiplique o valor de comprimento por 1000)\n//1 metro = 1e+6 Micrômetros (multiplique o valor de comprimento por 1e+6)\n//1 metro = 1e+9 Nanômetros (Multiplique o valor de comprimento por 1e+9)\n//1 metro = 0,000621371 Milhas (divida o valor de comprimento por 1609)\n//1 metro = 1,09361 Jardas (multiplique o valor de comprimento por 1,094)\n//1 metro = 3,28084 pés (multiplique o valor de comprimento por 3,281)\n//1 metro = 39,37008 polegada (multiplique o valor de comprimento por 39,37)\n//1 metro = 0,000539957 milha nautica (divida o valor de comprimento por 1852)\n\n\n// <div className=\"Godzilla\" id=\"position\">\n// <a href=\"#meuLink\" onclick=\"myFunction();\">\n\n//<img onload=\"mouse();\" alt=\"Fundo\" src=\"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/BBVShEa.img?h=416&amp;w=799&amp;m=6&amp;q=60&amp;u=t&amp;o=f&amp;l=f&amp;x=871&amp;y=654\" width=\"100%\" height=\"100%\" title=\"Cenário de cidades\"></img>\n\nexport default conversordeunidade\n\n"]},"metadata":{},"sourceType":"module"}